group BoaJavaHadoop : BoaJava;

Program(name, staticDeclarations, staticStatements, statements, tables) ::= <<
package boa;

public class <name> extends boa.runtime.BoaRunner {
	/** {@inheritDoc} */
	@Override
	public org.apache.hadoop.mapreduce.Job job(final org.apache.hadoop.conf.Configuration configuration, final org.apache.hadoop.fs.Path[] ins, final org.apache.hadoop.fs.Path out, final boolean robust) throws java.io.IOException {
		final org.apache.hadoop.mapreduce.Job job = super.job(configuration, ins, out, robust);

		job.setJobName("<name>: " + out);

		job.setJarByClass(<name>BoaMapper.class);

		job.setMapperClass(<name>BoaMapper.class);
		job.setCombinerClass(<name>BoaCombiner.class);
		job.setReducerClass(<name>BoaReducer.class);

		return job;
	}

	static {
		getOptions().addOption(org.apache.commons.cli.OptionBuilder.withLongOpt("splitsize")
										.withDescription("split size in BYTES")
										.hasArg()
										.withArgName("BYTES")
										.create("s"));
	}

	public static void main(String[] args) throws java.io.IOException, InterruptedException, ClassNotFoundException {
		final <name> runner = new <name>();
		
		final org.apache.commons.cli.CommandLine line = parseArgs(args, runner.getUsage());
		args = line.getArgs();
		if (args.length != 2) {
			System.err.println("Not enough arguments. Must give input directory and output directory.");
			printHelp(runner.getUsage());
		}

		final boolean robust = line.hasOption("robust");
		final int id;
		if (line.hasOption("job"))
			id = Integer.parseInt(line.getOptionValue("job"));
		else
			id = 0;
		
		final org.apache.hadoop.fs.Path[] ins = new org.apache.hadoop.fs.Path[1];
		ins[0] = new org.apache.hadoop.fs.Path(args[0] + "/projects.seq");
		
		final org.apache.hadoop.mapreduce.Job jb = runner.job(new org.apache.hadoop.conf.Configuration(), ins, new org.apache.hadoop.fs.Path(args[1]), robust);
		jb.getConfiguration().set("boa.input.dir", args[0]);

		if (line.hasOption("splitsize"))
			jb.getConfiguration().setInt("mapred.max.split.size", Integer.parseInt(line.getOptionValue("splitsize")));
		else
			jb.getConfiguration().setInt("mapred.max.split.size", 10000000);

		jb.setInputFormatClass(org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat.class);

		if (id > 0)
			jb.getConfiguration().setInt("boa.hadoop.jobid", id);
		jb.submit();
		if (id > 0)
			boa.io.BoaOutputCommitter.setJobID(jb.getJobID().toString(), id);
		System.err.println("Job ID: " + jb.getJobID().toString());

		if (line.hasOption("block")) {
			double lastSetup = -1;
			double lastMap = -1;
			double lastReduce = -1;
			while (!jb.isComplete()) {
				final double newSetup = jb.setupProgress();
				final double newMap = jb.mapProgress();
				final double newReduce = jb.reduceProgress();
				if (newSetup != lastSetup) {
					lastSetup = newSetup;
					System.err.println("SETUP : " + (newSetup * 100) + "%");
				}
				if (newMap != lastMap) {
					lastMap = newMap;
					System.err.println("MAP   : " + (newMap * 100) + "%");
				}
				if (newReduce != lastReduce) {
					lastReduce = newReduce;
					System.err.println("REDUCE: " + (newReduce * 100) + "%");
				}
				try {
					Thread.sleep (500);
				} catch (final Exception e) {}
			}
			System.err.println("JOB FINISHED: " + (jb.isSuccessful() ? "Success" : "Failed"));
		}
	}

	public String getUsage() {
		return "\<input1\> [.. \<inputN\>] \<outputDir\>";
	}
	
	static class <name>BoaMapper extends boa.runtime.BoaMapper {
		<staticDeclarations>
		
		<if(staticStatements)>
		{
			<staticStatements>
		}
		
		<endif>
		/** {@inheritDoc} */
		@Override
		protected void map(final org.apache.hadoop.io.Text key, final org.apache.hadoop.io.BytesWritable value, final org.apache.hadoop.mapreduce.Mapper\<org.apache.hadoop.io.Text, org.apache.hadoop.io.BytesWritable, boa.io.EmitKey, boa.io.EmitValue\>.Context context) throws java.io.IOException {
			try {
				final com.google.protobuf.CodedInputStream _inputStream = com.google.protobuf.CodedInputStream.newInstance(value.getBytes(), 0, value.getLength());
				<statements:{<it><\n>}>
			} catch (final com.google.protobuf.InvalidProtocolBufferException e) {
				if (this.robust)
					LOG.error(e.getClass().getName() + " caught", e);
				else
					throw e;
			} catch (final java.io.IOException e) {
				throw e;
			} catch (final RuntimeException e) {
				if (this.robust)
					LOG.error(e.getClass().getName() + " caught", e);
				else
					throw e;
			} catch (final Exception e) {
				if (this.robust)
					LOG.error(e.getClass().getName() + " caught", e);
				else
					throw new RuntimeException(e.getClass().getName() + " caught", e);
			}
		}

		/** {@inheritDoc} */
		@Override
		protected void setup(final org.apache.hadoop.mapreduce.Mapper.Context context) throws java.io.IOException, java.lang.InterruptedException {
			boa.functions.BoaAstIntrinsics.initialize(context);
			super.setup(context);
		}

		/** {@inheritDoc} */
		@Override
		protected void cleanup(final org.apache.hadoop.mapreduce.Mapper.Context context) throws java.io.IOException, java.lang.InterruptedException {
			boa.functions.BoaAstIntrinsics.close();
			super.cleanup(context);
		}
	}
	
	static class <name>BoaCombiner extends boa.runtime.BoaCombiner {
		public <name>BoaCombiner() {
			super();
			
			<tables:{<it><\n>}>		}
	}
	
	static class <name>BoaReducer extends boa.runtime.BoaReducer {
		public <name>BoaReducer() {
			super();

			<tables:{<it><\n>}>		}
	}
	
	@Override
	public org.apache.hadoop.mapreduce.Mapper getMapper() {
		return new <name>BoaMapper();
	}
	
	@Override
	public boa.runtime.BoaCombiner getCombiner() {
		return new <name>BoaCombiner();
	}
	
	@Override
	public boa.runtime.BoaReducer getReducer() {
		return new <name>BoaReducer();
	}
}
>>

EmitStatement(indices, id, expression, weight) ::= "context.write(new boa.io.EmitKey(<if(indices)><indices:{\"[\" + <it> + \"]\"}; separator=\" + \">, <endif><id>), new boa.io.EmitValue(<expression><if(weight)>, <weight><endif>));<\n>"
