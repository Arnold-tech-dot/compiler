p: Project = input;
stopwords : array of string = {"","a","about","above","after","again","against","all","am","an","and","any","are","arent","as","at","be","because","been","before","being","below","between","both","but","by","cant","cannot","could","couldnt","did","didnt","do","does","doesnt","doing","dont","down","during","each","few","for","from","further","had","hadnt","has","hasnt","have","havent","having","he","hed","hell","hes","her","here","heres","hers","herself","him","himself","his","how","hows","i","id","ill","im","ive","if","in","into","is","isnt","it","its","its","itself","lets","me","more","most","mustnt","my","myself","no","nor","not","of","off","on","once","only","or","other","ought","our","ours"
,"ourselves","out","over","own","same","shant","she","shed","shell","shes","should","shouldnt","so","some","such","than","that","thats","the","their","theirs","them","themselves","then","there","theres","these","they","theyd","theyll","theyre","theyve","this","those","through","to","too","under","until","up","very","was","wasnt","we","wed","well","were","weve","were","werent","what","whats","when","whens","where","wheres","which","while","who","whos","whom","why","whys","with","wont","would","wouldnt","you","youd","youll","youre","youve","your","yours","yourself","yourselves"};

terms : array of string = {"shaves", "kind", "reflect", "hash)", "fix", "'merging'", "facilitate", "keep", "shortcircuit", "supertypes", "specifying", "-check-deps", "think", "compilation!)", "make", "operandtype", "fusion", "-g,--generate", "graph", "good", "support.", "scannotation", "<", "creating", "ors", "eg,", "variable", "int32", "decimal", "compiled", "sizzlemap", "final", "statementexpr", "repl,", "eclipse", "inaccessible", "disable", "features", "security", "value,key", "jre", "pairs", "broken", "lines", "strings", "simplify", "char", "start),", "bug", "desugars/transforms)", "picking", "crash", "declaration", "double", "program,", "cherry", "inherited", "intrinsic", "prints", "messages", "vardecls", "#12", "listener", "optimizations,", "target", "sometimes", "range", "compile,", "died", "lambdawithparanthesis,", "evaluator", "unused", "setpos", "usage:", "visitors", "usage", "splitn", "continuous", "suites", "initialized", "children", "any,", "incorporate", "#1", "-p,--parse", "(more", "visit", "-ast", "bottom", "(or", "static,", "listeners.", "block", "#3", "expressionkind.method_reference", "getast()", "sql", "code,", "formats", "included", "project", "requires", "programs", "arg", "overloaded", "declaring", "java", "single", "cache", "attribute", "renaming", "storing", "consider", "protolist", "break,", "accuracy", "substring", "travis", "causes", "npe", "identify", "boacompiler", "coderepository", "parse", "effectively", "utils.", "svn", "modifierkind", "identifiers", "according", "#2", "(comma-separated", "indicate", "editing", "generator,", "https://github.com/boalang/compiler", "modifier:", "attempt", "counted", "do-while", "nrand()", "bytes", "asts", "hash()", "trie", ";", "simple", "hridesh", "bases.", "inheritedattributetransformer.java", "strfind/strrfind", "loops", "read/debug", "computing", "properly", "scientific", "sure", "pipeline", "version", "checker", "integrate", "refactoring", "boolean", "calling", "(no", "finally", "case,", "check", "protobuf", "wrong", "bit", "extremely", "removed?)", "dealing", "boolean,", "int", "arguments", "100th", "tabs", "line/", "new", "dataset", "reduce", "modifier", "8", "rename", "some,", "us", "code.", "javac", "appear", "filter", "ancestors", "use", "done", "filter,", "4,", "types.", "visitor-missing-before.boa:", "function,", "run", "-l,--libs", "accept", "reflection", "float", "lists", "optimizations", "-5", "naming", "rtlib", "comparison", "(as", "underscores", "cleanup", "hasfiletype()", "needs", "reads", "regarding", "proto", "30%", "optimization", "pass", "jj", "split*", "3,", "datagen", "tree.", "(test", "wildcards", "#6", "lot", "move", "maps", "causing", "cbca179c9a50598d46e217edbd4f8b816f0af9cf,", "'when'", "repl", "based", "currently", "line", "optional", "made", "test,", "random", "counting", "example", "failure", "faster", "expr)", "classifier", "declared", "minus", "string()", "aggregator", "expressions", "incomplete", "setup/cleanup", "actually", "size()", "removing", "schema", "-nv,--no-visitor-fusion", "filename", "timeouts", "visitor", "npes", "arrays", "half", "snuck", "pick", "'after'", "editor", "order", "1-7,", "lexing/parsing", "ontology.", "upgrade", "changes/cleanups", "getsnapshot()", "e.g.,", "indexing", "(they", "internally", "better", "deep,", "lambda,", "query", "getsnapshot", "returning", "function/aggregator", "types", "quantifiers,", "templates/", "build", "certain", "#8", "appearing", "operands", "still", "create", "anyway)", "base", "readding", "blocking", "statistical", "decls", "split", "declare", "(not", "122&147", "utils", "(non-int)", "n:", "typedecl", "type,", "reference,", "copyright", "took", "pascalcase", "min", "#29", "params/return", "add", "scans", "together", "see", "compiling", "hashcoding", "automated", "system", "modifiers", "program.", "store", "invalid", "aliases", "subfields,", "fix:", "javacc", "several", "generating", "run-seq-repo-import", "ajax", "returns", "period", "illustrated", "revert", "json", "namespace", "preventing", "easily", "accessing", "folder", "import", "old", "variant", "get", "give", "job", "changed", "lambdawithparanthesis", "<n.", "string.split", "1.6", "strategy", "preserving", "tested", "change", "has_modifier(m,", "accidentally", "regexes", "adapter", "block,", "graphs.", "web", "partitioner", "metadata", "help", "arr", "objects", "lection", "(functions/aggregators)", "(10mb)", "import.", "stringtemplate", "language", "a()[0", "refactor", "table", "arithmetic", "hard", "#9", "input", "also", "reporting", "get,", "full", "--robust,", "(after", "tags", "generation", "-pp", "run-mapfile-gen:", "stub", "metrics.", "are:", "v4", "limiting", "control", "author", "cast", "merging", "additional", "sane", "identifier", "changing", "datatypes", "applying", "somehow", "semantic", "sizzle", "codegen", "moved", "kill", "things", "64k", "commit", "combiner", "consistency)", "properties", "replace", "remove", "classification", "embedding", "redeclvar()", "branch", "frontend", "namespace,", "ace", "stop,", "initializers,", "sql,", "used)", "datageneration", "perform", "second", "good,", "format)", "args", "changedfile,", "empty", "created", "resolved", "filtering", "passed", "renamed", "array", "custom", "methods", "look", "optimized", "cleaner", "exception", "sort", "missing", "fixed", "immediately", "||", "db", "integer", "eases", "happens", "4.5", "size.", "sorted", "repository_type", "npm", "keys()", "issue", "design:", "refactoring/code", "cases", "bodies", "instance", "values()", "built", "compilation", "since", "conjunctions", "eof", "reallocating", "avoiding", "apache", "2nd", "concat", "string", "without", "refactor...", "combine,", "paren", "getsnapshot(),", "performance", "parsed", "harness", "method,", "has_annotation(m,", "-o,--out", "unknown", "overflow", "regression", "moving", "isequal()", "method", "options", "(64mb)/complex", "patterns", "works", "*before*", "(for", "permanent", "printer", "lifting", "var", "4.4", "expressionkind", "javassist", "invoking", "due", "introduced", "fix.", "forgekind", "identfiers", "time", "whenkind", "later", "delay", "multiple", "recursive", "variables", "inheriting", "force", "symbol", "header", "one", "arbitraryinstancemethodreference", "lecting", "projects", "worry", "risk", "ast", "unwanted", "resistant", "warning", "endings", "general", "odd", "caused", "metrics", "eol", "flow", "field", "built-in", "typechecking", "design", "reusing", "existing", "correct", "for-loop", "problem", "finding", "ant", "special-case", "classpath", "override", "database", "rules", "templates", "places", "hdfs", "nested", "declarations", "targets", ".travis.yml", "scopes,", "optimize", "passing", "index", "doc", "ci", "fails,", "visits", "ll", "duplication", "intersection", "fixes.", "spaces", "qualified_name", "code", "--in", "regenerates", "old,", "stderr", "extraneous", "using", "recent", "least", "allow", "future", "boa_input", "https://github.com/boalang/compiler.git", "unary", "routine", "aggregation", "(json", "declaration,", "previously", "long", "handling", "used", "branches", "none", "clone", "pretty", "vardecl", "modifications", "antlr", "double.tostring", "trimming", "picked", "translating", "infrastructure", "longtostring", "making", "-c,--compile", "'before'", "enum", "disallowing", "ints", "hadoop", "scoping", "stage", "valid", "==/!=,", "know", "deleted", "befores/afters", "jtb", "new()", "comment", "jobs", "-v,--visitors-fused", "java8", "binary", "around", "cleaned", "reported", "just", "multicatch", "request", "rhs", "changedfiles", "tasks", "load", "sum", "wildcard", "static", "extra", "mistake", "aggregators", "build.xml", "can", ">", "specific", "lexer", "found", "statements", "decrease", "scope", "scm", "debug", "api", "alter", "lambda", "commonly", "local", "languages", "throw", "minute", "warnings", "tree", "accepting", "len()", "ensure", "name", "casts", "trying", "top", "future,", "allowed-stops", "known", "inside", "imports", "adding/testing", "float/int", "testreceiverparameter", "scan", "regenerating", "lexing", "convert", "pull", "named", "casing", "converting", "(patch", "bad", "gen", "commentsroot", "hopefully", "keyword", "storage", "switching", "exceeding", "finish", "libs", "generics", "expression", "packaged", "start", "avoid", "results,", "reducer", "typo", "globals", "->", "errors", "matchers", "changedfile", "console", "groupings", "timeout", "1.7", "windows", "assigning", "references", "option:", "path", "gives", "params", "cli", "point", "done,", "ssh://github.com/boalang/compiler", "trapped", "compile.sh", "back", "exact", "modifying", "grammar", "tweak", "filenames", "ref", "increase", "snappy", "file)", "structure", "decimal/long", "inheritedattributetransformer", "failed:", "generate", "parent", "number", "run-seq-proj-combine:", "cleanup,", "fails", "(but", "considered", "website", "compile", "possible", "running", "seconds", "various", "temporary", "typed", "conversion", "locals", "fuse", "grabbing", "table,", "aggressive,", "indices", "if/else", "commented", "top/bottom", "non-visit", "prior", "#47", "inconsistencies", "+", "moment", "recovery", "stdout/stderr", "wrap", "getcomments()", "w/", "review", "isfixingrevision(revision)", "abstract", "fixme", "indicating", "results", "however", "failing", "check.", "function", "read", "24", "library", "diff", "default", "libs.", "'hbase'", "variables,", "'java8'", "specify", "broken,", "souce", "issues", "(currently", "fingerprint", "end", "generated", "recovering,", "like", "0f6a36431757eec38995b0a26a8e14b10474d0c4", "broke", "02330bdac3b89c67ac7599559a0192ef062162b1.", "comments", "protobufs", "person", "repos", "merge", "enabling", "modified", "need", "include", "key", "loop", "directory", "found/fixed", "reverts", "int)", "subdir,", "couple", "kind)", "(even", "modeled", "place", "parsing.", "continue,", "proper", "hbase", "updating", "size", "weight", "testing", "typecheck", "commandline", "insert", "complete", "cfg", "map/set", "below.", "hand-written", "phases", "first,", "select", "reworking", "java8visitor", "infinite", "output", "times", "import/use", "headers", "seq", "huge", "starts", "git", "file(s)", "conditionals", "version.", "missed", "aggregators/methods", "parens", "non-ast", "getcomments(changedfile)", "reuse", "protolists", "ramu)", "instancemethodreference,", "length", "pascal", "set", "re-scanning", "'master'", "initial", "level", "testcases", "many", "getissues()", "minor", "key,value", "might", "find", "compiler", "identical", "quantifier", "completing", "script", "fabs(),", "profiling", "bool", "completed", "format", "committing", "neha", "compression", "regex/string", "analysis", "show", "status", "package", "function:", "umn", "removelast()", "toplevel.", "giving", "blocks/functions", "quantifiers", "ssh://pyrite.cs.iastate.edu/home/other/design/boaroot", "emit", "format()", "tabsize", "additions", "braces),", "ln()", "scaling", "newer", "85bc09899b5dd892d2e92b3fc84710940ae991f8.", "(the", "29", "result", "similar", "execute", "constructormethodreference", "compiles", "mergefrom", "put", "feature", "strict", "algorithm", "progress", "support", "adding", "modifier.visibility", "def()", "fingerprintof()", "generator", "break", "contain", "./boa.sh", "snapshot", "older", "error", "indexee", "may", ":=", "caching", "substring()", "top/bottom/min/max", "builtin", "properties.", "return", "extensions", "class", "try", "takes", "top)", "removal", "exist", "n", "(limited)", "via", "names", "doubts", "maps/stacks", "jars", "this.last", "&", "chunks", "placeholders", "expression.", "commits", "clean", "kinds", "task", "--splitsize", "template", "-e,--execute", "option", "completion", "semantics", "versions", "error:", "flag", "max", "leave", "node", "util", "really", "entry", "#46", "lift", "current(t)", "last", "bug)", "shared", "exists", "tables", "every", "reducers", "actions,", "emits", "has_modifier_public(m)", "runtime", "<arg>", "setting", "uptodate", "everything", "reword", "lib", "almost", "filetype", "always", "typecheck/codegen", "seems", "removed", "noo,", "resulting", "initialize", "log()", "non-zero", "aggregating", "maps,", "redeclaring", "buffer", "copyrights", "@6,24:24='n',<76>,2:1", "consistency", "transformations", "now", "given", "two", "breaks", "annotations", "$", "point.", "config", "become", "#45", "first", "trim()", "mins", "client", "getarg()", "dumper", "intrinsics", "yet", "location", "importlibs", "isfixingrevisions", "generic", "fixing", "builtins", "remote-tracking", "thus", "#32", "expressionmethodreference", "literals", "printing", "overloads", "traversal.", "run-seq-sort:", "uncomment", "parsing", "classes", "#40", "lots", "never", "#55", "added,", "hierarchy,", "output.", "copy", "5", "nodes", "small", "instead", "oring", "construction", "recursion", "defined", "halt", "accomodate", "form", "mark", "fail", "testcase", "allowed", "expects", "big)", "take", "seqfile", "selector", "operators", "parser", "-p", "self-casts", "character", "hanging", "digit/letter", "p.code_repositories;", "transformer,", "provide", "makes", "desugar", "alternate", "initializers", "gain", "trim", "'remotes/upstream/master'", "constructors", "3", "ast,", "rows", "log", "(temporary)", "switch", "simplifies", "showing", "grammars", "transformer", "anonymous", "string(f);", "resubmitting", "sll", "checking", "message", "functionality", "complex", "stack", "regexs", "another", "len())", "junit,", "work", "2,", "added", "cherry-pick", "renames", "35", "list)", "reproducibility", "anyway", "test-cfg.boa", "file", "separate", "logic", "lookahead", "yml", "directly,", "right", "visiting", "#53", "chained", "param", "void", "introduce", "parse,", "2", "values.", "iskind", "values", "pop()", "easier", "refs", "license", "added.", "revision", "massive", "enums", "!def(..)", "requested", "timestamp", "visitors)", "host", "viewing", "progress()", "general)", "reference", "oops", "allowing", "packages", "setup", "duplicated", "validated", "varargs", "contains", "basic", "impossible", "uint32", "update", "analyze", "type_name", "encountered", "cleanup/reorg", "repositorykind", "checks", "clarity", "working", "#31", "init", "updated", "ast_len", "ast_len()", "major", "value", "match", "supports", "curry", "#52", "explicitly", "much", "(parse", "hack", "formatting", "stop;", "<=", "1", "#41", "script.", "(uses", ">=", "run-seq-sort-merge:", "sequence", "rewriting", "stop", "simple/complex", "current", "refactoring.", "print", "[compiler", "-n,--name", "batch", "it)", "debugging", "blocks", "(such", "implemented", "calls", "decl", "mapfile", "potential", "plus", "a38459fc5150de27a81e74c9e9749cf0958b0517", "bash", "main", "mappers", "protomap", "fixes", "repeating", "allows", "given)", "jar", "improve", "check/codegen", "rework", "command-line", "interfaces", "splitall", "packet", "putting", "case", "went", "list", "loc()", "push", "0", "forge", "frontends", "#51", "common", "semions", "root", "file.", "(fingerprint", "uses", "robust", "integration", "thought,", "super", "call", "select-from-func-return", "leading", "avoids", "will", "longer", "constructor", "require", "token", "numbers", "noa,", "port", "functions", "syntax", "statement", "x", "spacing", "-l", "remove()", "boa-generated", "(i", "stuff", "conditions", "a().foo", "javadoc", "suite", "underlines", "helper", "n.env,", "clear()", "front", "ramanathan", "vars", "test", "boa", "condition", "comparisons", "a-za-z0-9,", "outputs", "functionality.", "operator", "input,", "projects/ast", "protoc", "framework", "optimizer", "main.", "(similar", "program", "type", "lex/parse", "negative", "github.com:boalang/compiler", "tests", "30", "map", "dev/data-gen", "modify", "data", "1.", "even", "fields", "source", "argument", "dir", "typeexceptions", "writing", "exceptions", "conversions", "displaying", "implement", "transforms", "(just", "ambiguities", "sll/ll", "longs", "@12,46:46='n',<76>,3:1", "changes", "counters", "trap", "files", "v", "(and", "eat", "errors,", "-i,--in", "problems", "mysql", "disallow", "master", "scanner", "-", "directories", "(noc)", "attributes", "think)", "keywords", "duplicate", "'boa/master'", "automatically", "cash", "considerably", "bugs", "lambdawithtypedeclaration", "44", "report", "called", "splits", "notation", "combine", "required.", "(vardecl", "docs"};


model : output lsa of array of int;

size:= len(terms)-1;
a : array of int; 
a = new(a, size + 1, 0);

stopword := function(str: string) : bool {
		l := len(stopwords)-1;
		while(l>=0) {
			if(stopwords[l] == str)
				return true;
		l--;
		}
		return false;
};

Terms := function(str: string) {
	if(!stopword(lowercase(str))) {
		e := size;
		while(e >=0) {
			if(lowercase(terms[e]) == lowercase(str)){
				a[e] = 1;
				break;
			}
			e--;			
		}			
	}
};

visit(p, visitor {
	
	before node:Revision -> {
		if(yearof(node.commit_date) > 2013 && monthof(node.commit_date) > 6 && monthof(node.commit_date) < 8) {
			#arr := matchstrs("[a-zA-Z0-9]*",node.log);
			arr := splitall(node.log, " ");
			l := len(arr)-1;
				while(l>=0){
					Terms(trim(arr[l]));
				l--;	
				}
			model << a;
			a = new(a, size + 1, 0); 
		}	
	}

});



