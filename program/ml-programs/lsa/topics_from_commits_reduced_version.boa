p: Project = input;

print : output collection[int][int] of string;

stopwords : array of string = {"","a","about","above","after","again","against","all","am","an","and","any","are","arent","as","at","be","because","been","before","being","below","between","both","but","by","cant","cannot","could","couldnt","did","didnt","do","does","doesnt","doing","dont","down","during","each","few","for","from","further","had","hadnt","has","hasnt","have","havent","having","he","hed","hell","hes","her","here","heres","hers","herself","him","himself","his","how","hows","i","id","ill","im","ive","if","in","into","is","isnt","it","its","its","itself","lets","me","more","most","mustnt","my","myself","no","nor","not","of","off","on","once","only","or","other","ought","our","ours"
,"ourselves","out","over","own","same","shant","she","shed","shell","shes","should","shouldnt","so","some","such","than","that","thats","the","their","theirs","them","themselves","then","there","theres","these","they","theyd","theyll","theyre","theyve","this","those","through","to","too","under","until","up","very","was","wasnt","we","wed","well","were","weve","were","werent","what","whats","when","whens","where","wheres","which","while","who","whos","whom","why","whys","with","wont","would","wouldnt","you","youd","youll","youre","youve","your","yours","yourself","yourselves"};

terms : array of string = {
"shaves", "kind", "reflect", "fix", "facilitate", "keep", "shortcircuit", "supertypes", "in", "specifying", "think", "make", "operandtype", "fusion", "graph", "good", "scannotation", "functionaggregator", "creating", "ors", "variable", "hasmodifierm", "51", "int32", "decimal", "compiled", "sizzlemap", "final", "40", "statementexpr", "eclipse", "inaccessible", "disable", "features", "security", "jre", "pairs", "broken", "lines", "strings", "simplify", "char", "bug", "picking", "crash", "declaration", "double", "cherry", "inherited", "nonast", "intrinsic", "prints", "messages", "vardecls", "foundfixed", "runseqrepoimport", "sshgithubcomboalangcompiler", "expr", "listener", "target", "sometimes", "range", "died", "getarg", "evaluator", "selfcasts", "unused", "setpos", "visitors", "usage", "splitn", "41", "pparse", "continuous", "suites", "52", "initialized", "children", "incorporate", "visit", "some", "bottom", "block", "traversal", "commaseparated", "sql", "formats", "included", "project", "requires", "programs", "arg", "overloaded", "declaring", "java", "single", "boash", "junit", "cache", "attribute", "renaming", "hasannotationm", "storing", "consider", "protolist", "accuracy", "substring", "travis", "causes", "npe", "or", "identify", "boacompiler", "functionsaggregators", "coderepository", "parse", "effectively", "53", "svn", "modifierkind", "identifiers", "according", "indicate", "editing", "selectfromfuncreturn", "removelast", "attempt", "counted", "hierarchy", "bytes", "asts", "trie", "simple", "hridesh", "llibs", "loops", "doubletostring", "computing", "properly", "scientific", "sure", "pipeline", "version", "checker", "integrate", "refactoring", "boolean", "calling", "finally", "check", "protobuf", "wrong", "bit", "nonzero", "extremely", "dealing", "int", "arguments", "100th", "tabs", "astlen", "visitormissingbeforeboa", "new", "no", "dataset", "reduce", "modifier", "8", "rename", "us", "javac", "appear", "noa", "filter", "ancestors", "use", "done", "run", "remotetracking", "accept", "reflection", "float", "lists", "optimizations", "naming", "rtlib", "comparison", "underscores", "cleanup", "55", "needs", "reads", "regarding", "proto", "optimization", "pass", "jj", "9", "datagen", "wildcards", "lot", "move", "124646n7631", "maps", "causing", "repl", "based", "currently", "line", "fabs", "optional", "getissues", "made", "random", "counting", "example", "failure", "faster", "classifier", "declared", "minus", "aggregator", "expressions", "incomplete", "actually", "mapset", "removing", "schema", "filename", "timeouts", "visitor", "npes", "valuekey", "arrays", "half", "snuck", "pick", "subdir", "editor", "order", "6", "getcomments", "httpsgithubcomboalangcompilergit", "upgrade", "testcfgboa", "digitletter", "indexing", "internally", "better", "query", "getsnapshot", "returning", "blocksfunctions", "a0", "types", "runmapfilegen", "build", "isfixingrevisionrevision", "certain", "appearing", "lexingparsing", "operands", "still", "create", "addingtesting", "base", "readding", "blocking", "paramsreturn", "statistical", "decls", "split", "declare", "noc", "utils", "typedecl", "fingerprintof", "copyright", "took", "pascalcase", "min", "add", "scans", "together", "see", "compiling", "hashcoding", "automated", "system", "modifiers", "store", "invalid", "aliases", "javacc", "several", "httpsgithubcomboalangcompiler", "generating", "ajax", "ifelse", "returns", "period", "illustrated", "revert", "json", "namespace", "preventing", "easily", "accessing", "folder", "import", "old", "variant", "get", "give", "job", "changed", "lambdawithparanthesis", "strategy", "preserving", "when", "tested", "change", "accidentally", "regexes", "adapter", "recovering", "web", "partitioner", "metadata", "help", "arr", "objects", "lection", "stringtemplate", "language", "refactor", "table", "arithmetic", "hard", "input", "also", "reporting", "full", "tags", "decimallong", "len", "floatint", "generation", "stub", "simplecomplex", "inheritedattributetransformerjava", "toplevel", "v4", "limiting", "checkcodegen", "control", "author", "cast", "merging", "additional", "sane", "identifier", "changing", "datatypes", "applying", "somehow", "semantic", "sizzle", "codegen", "moved", "kill", "things", "64k", "commit", "combiner", "properties", "replace", "remove", "classification", "embedding", "nname", "eg", "branch", "frontend", "cbca179c9a50598d46e217edbd4f8b816f0af9cf", "ace", "nonvisit", "datageneration", "keys", "perform", "second", "args", "hash", "empty", "created", "resolved", "filtering", "passed", "renamed", "array", "custom", "methods", "look", "optimized", "cleaner", "exception", "sort", "missing", "fixed", "immediately", "db", "integer", "eases", "happens", "sorted", "npm", "issue", "runseqsort", "cases", "bodies", "instance", "built", "compilation", "since", "conjunctions", "eof", "reallocating", "avoiding", "apache", "2nd", "ccompile", "concat", "scopes", "string", "without", "paren", "performance", "parsed", "harness", "64mbcomplex", "unknown", "noo", "overflow", "regression", "moving", "method", "any", "options", "patterns", "works", "permanent", "printer", "lifting", "var", "expressionkind", "javassist", "invoking", "due", "introduced", "forgekind", "identfiers", "time", "whenkind", "later", "delay", "multiple", "recursive", "variables", "inheriting", "force", "symbol", "header", "one", "arbitraryinstancemethodreference", "lecting", "projects", "worry", "risk", "ast", "unwanted", "resistant", "topbottom", "warning", "endings", "general", "sllll", "odd", "caused", "metrics", "eol", "flow", "field", "thislast", "required", "typechecking", "design", "reusing", "existing", "subfields", "strfindstrrfind", "correct", "problem", "finding", "ant", "classpath", "override", "database", "rules", "templates", "places", "hdfs", "nested", "declarations", "targets", "optimize", "passing", "index", "doc", "ci", "visits", "ll", "duplication", "intersection", "spaces", "code", "regenerates", "stderr", "extraneous", "using", "recent", "least", "allow", "future", "unary", "routine", "aggregation", "previously", "long", "handling", "used", "branches", "none", "clone", "pretty", "vardecl", "modifications", "antlr", "trimming", "picked", "translating", "infrastructure", "longtostring", "making", "refactoringcode", "enum", "disallowing", "ints", "hadoop", "scoping", "desugarstransforms", "for", "stage", "valid", "know", "deleted", "jtb", "comment", "jobs", "java8", "repositorytype", "binary", "around", "cleaned", "reported", "just", "multicatch", "request", "rhs", "changedfiles", "tasks", "the", "load", "sum", "wildcard", "static", "beforesafters", "extra", "mistake", "aggregators", "can", "specific", "lexer", "found", "statements", "decrease", "scope", "scm", "debug", "api", "alter", "85bc09899b5dd892d2e92b3fc84710940ae991f8", "currentt", "ln", "lambda", "commonly", "nvnovisitorfusion", "devdatagen", "local", "languages", "throw", "minute", "warnings", "tree", "expressionkindmethodreference", "accepting", "forloop", "ensure", "name", "azaz09", "casts", "trying", "top", "thought", "known", "inside", "imports", "sshpyritecsiastateeduhomeotherdesignboaroot", "testreceiverparameter", "pcoderepositories", "importuse", "stdoutstderr", "scan", "regenerating", "lexing", "convert", "pull", "named", "casing", "big", "directly", "converting", "bad", "eexecute", "such", "gen", "commentsroot", "hopefully", "keyword", "storage", "switching", "exceeding", "below", "finish", "libs", "generics", "expression", "packaged", "failed", "start", "avoid", "reducer", "typo", "globals", "errors", "nrand", "matchers", "changedfile", "console", "groupings", "timeout", "windows", "assigning", "references", "path", "gives", "params", "cli", "point", "trapped", "back", "exact", "l", "not", "modifying", "grammar", "tweak", "filenames", "ref", "increase", "snappy", "structure", "inheritedattributetransformer", "generate", "parent", "number", "fails", "considered", "website", "compile", "122147", "possible", "running", "seconds", "various", "temporary", "typed", "conversion", "locals", "fuse", "grabbing", "indices", "commented", "typename", "prior", "inconsistencies", "moment", "recovery", "wrap", "review", "abstract", "fixme", "indicating", "results", "however", "failing", "function", "read", "afoo", "24", "library", "diff", "default", "runseqsortmerge", "specify", "souce", "issues", "fingerprint", "end", "generated", "like", "typecheckcodegen", "0f6a36431757eec38995b0a26a8e14b10474d0c4", "clear", "broke", "comments", "protobufs", "person", "repos", "merge", "oout", "enabling", "modified", "need", "12", "include", "key", "loop", "directory", "reverts", "couple", "modeled", "place", "buildxml", "proper", "hbase", "updating", "size", "weight", "more", "testing", "allowedstops", "typecheck", "commandline", "insert", "complete", "cfg", "phases", "actions", "select", "reworking", "java8visitor", "infinite", "output", "times", "headers", "seq", "huge", "starts", "git", "vvisitorsfused", "conditionals", "missed", "setupcleanup", "parens", "reuse", "i", "mapsstacks", "protolists", "length", "pascal", "p", "set", "initial", "level", "testcases", "02330bdac3b89c67ac7599559a0192ef062162b1", "many", "minor", "might", "find", "hasfiletype", "loc", "compiler", "splitsize", "identical", "quantifier", "completing", "script", "profiling", "bool", "completed", "format", "cherrypick", "committing", "neha", "compression", "analysis", "handwritten", "show", "status", "package", "umn", "giving", "quantifiers", "emit", "tabsize", "additions", "scaling", "newer", "29", "result", "similar", "dowhile", "execute", "constructormethodreference", "braces", "compiles", "mergefrom", "rescanning", "put", "feature", "strict", "algorithm", "progress", "support", "adding", "generator", "break", "contain", "snapshot", "17", "older", "error", "indexee", "changescleanups", "may", "hasmodifierpublicm", "caching", "builtin", "return", "extensions", "class", "try", "takes", "bases", "removal", "exist", "n", "via", "names", "doubts", "jars", "iin", "limited", "chunks", "placeholders", "commits", "clean", "kinds", "task", "template", "stringsplit", "option", "completion", "semantics", "versions", "16", "flag", "max", "leave", "node", "util", "modifiervisibility", "really", "entry", "listeners", "10mb", "lift", "last", "regexstring", "shared", "exists", "tables", "every", "reducers", "emits", "runtime", "redeclvar", "setting", "uptodate", "everything", "reword", "lib", "almost", "filetype", "lexparse", "always", "seems", "removed", "resulting", "initialize", "aggregating", "redeclaring", "buffer", "copyrights", "but", "consistency", "transformations", "now", "githubcomboalangcompiler", "given", "two", "breaks", "annotations", "config", "getast", "become", "first", "mins", "client", "dumper", "intrinsics", "instancemethodreference", "yet", "location", "importlibs", "isfixingrevisions", "before", "generic", "fixing", "topbottomminmax", "builtins", "thus", "expressionmethodreference", "literals", "printing", "overloads", "as", "4", "uncomment", "parsing", "classes", "lots", "never", "getcommentschangedfile", "47", "copy", "5", "nodes", "small", "instead", "oring", "construction", "recursion", "defined", "62424n7621", "halt", "accomodate", "form", "mark", "def", "fail", "testcase", "allowed", "expects", "take", "seqfile", "selector", "operators", "parser", "character", "hanging", "provide", "makes", "desugar", "alternate", "initializers", "gain", "trim", "constructors", "3", "rows", "it", "log", "switch", "simplifies", "qualifiedname", "showing", "boainput", "grammars", "transformer", "anonymous", "46", "resubmitting", "sll", "isequal", "checking", "message", "functionality", "complex", "stack", "regexs", "another", "work", "added", "renames", "35", "reproducibility", "anyway", "file", "separate", "logic", "lookahead", "yml", "right", "stringf", "visiting", "chained", "param", "void", "introduce", "2", "iskind", "values", "easier", "refs", "license", "revision", "massive", "enums", "requested", "pop", "timestamp", "host", "viewing", "reference", "oops", "allowing", "packages", "setup", "duplicated", "validated", "varargs", "contains", "basic", "impossible", "uint32", "update", "analyze", "keyvalue", "encountered", "repositorykind", "continue", "checks", "clarity", "working", "init", "updated", "major", "value", "match", "supports", "curry", "explicitly", "much", "specialcase", "hack", "formatting", "1", "sequence", "rewriting", "stop", "current", "print", "are", "batch", "debugging", "blocks", "implemented", "ramu", "calls", "decl", "mapfile", "potential", "plus", "a38459fc5150de27a81e74c9e9749cf0958b0517", "bash", "main", "mappers", "protomap", "fixes", "after", "repeating", "allows", "jar", "cleanupreorg", "remotesupstreammaster", "improve", "rework", "ggenerate", "interfaces", "readdebug", "boamaster", "splitall", "packet", "putting", "case", "they", "went", "list", "push", "0", "pp", "32", "aggregatorsmethods", "forge", "frontends", "nonint", "common", "semions", "root", "nenv", "uses", "robust", "integration", "super", "call", "leading", "avoids", "will", "longer", "constructor", "require", "token", "numbers", "port", "functions", "deep", "syntax", "statement", "x", "spacing", "aggressive", "", "stuff", "conditions", "31", "javadoc", "suite", "graphs", "underlines", "helper", "front", "runseqprojcombine", "ramanathan", "vars", "test", "boa", "condition", "comparisons", "outputs", "operator", "protoc", "framework", "optimizer", "w", "program", "checkdeps", "and", "type", "negative", "tests", "30", "map", "modify", "data", "even", "fields", "source", "argument", "patch", "dir", "typeexceptions", "writing", "45", "exceptions", "boagenerated", "conversions", "displaying", "implement", "transforms", "ambiguities", "longs", "changes", "counters", "trap", "files", "v", "eat", "compilesh", "problems", "mysql", "disallow", "master", "scanner", "directories", "attributes", "travisyml", "keywords", "duplicate", "ontology", "automatically", "cash", "considerably", "bugs", "lambdawithtypedeclaration", "44", "report", "called", "splits", "notation", "combine", "projectsast", "docs"};


model : output lsa of array of int;

size:= len(terms)-1;
a : array of int; 
a = new(a, size + 1, 0);

stopword := function(str: string) : bool {
		l := len(stopwords)-1;
		while(l>=0) {
			if(stopwords[l] == str)
				return true;
		l--;
		}
		return false;
};

Terms := function(str: string) {
	if(!stopword(lowercase(str))) {
		e := size;
		while(e >=0) {
			if(lowercase(terms[e]) == lowercase(str)){
				a[e] = 1;
				break;	
			}
			e--;			
		}			
	}
};

visit(p, visitor {
	
	before node:Revision -> {
		if(yearof(node.commit_date) > 2014 && yearof(node.commit_date) < 2016 && monthof(node.commit_date) > 10 && monthof(node.commit_date) < 12) {
			#arr := matchstrs("[a-zA-Z0-9]*",node.log);
			arr := splitall(node.log, " ");
			print[monthof(node.commit_date)][dayofmonth(node.commit_date)] << node.log;
			l := len(arr)-1;
				while(l>=0){
					Terms(trim(arr[l]));
				l--;	
				}

			model << a;
			a = new(a, size + 1, 0); 
		}	
	}

});



