// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: individual.proto

package boa.types.transportation;

public final class Individual {
  private Individual() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PersonOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .boa.types.transportation.STATE state = 1;
    /**
     * <code>required .boa.types.transportation.STATE state = 1;</code>
     */
    boolean hasState();
    /**
     * <code>required .boa.types.transportation.STATE state = 1;</code>
     */
    boa.types.transportation.State.STATE getState();

    // required float ST_CASE = 2;
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    boolean hasSTCASE();
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    float getSTCASE();

    // required float VE_FORMS = 3;
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    boolean hasVEFORMS();
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    float getVEFORMS();

    // required float VEH_NO = 4;
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    boolean hasVEHNO();
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    float getVEHNO();

    // required float PER_NO = 5;
    /**
     * <code>required float PER_NO = 5;</code>
     */
    boolean hasPERNO();
    /**
     * <code>required float PER_NO = 5;</code>
     */
    float getPERNO();

    // required float STR_VEH = 6;
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    boolean hasSTRVEH();
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    float getSTRVEH();

    // required float COUNTY = 7;
    /**
     * <code>required float COUNTY = 7;</code>
     */
    boolean hasCOUNTY();
    /**
     * <code>required float COUNTY = 7;</code>
     */
    float getCOUNTY();

    // required float DAY = 8;
    /**
     * <code>required float DAY = 8;</code>
     */
    boolean hasDAY();
    /**
     * <code>required float DAY = 8;</code>
     */
    float getDAY();

    // required float MONTH = 9;
    /**
     * <code>required float MONTH = 9;</code>
     */
    boolean hasMONTH();
    /**
     * <code>required float MONTH = 9;</code>
     */
    float getMONTH();

    // required float HOUR = 10;
    /**
     * <code>required float HOUR = 10;</code>
     */
    boolean hasHOUR();
    /**
     * <code>required float HOUR = 10;</code>
     */
    float getHOUR();

    // required float MINUTE = 11;
    /**
     * <code>required float MINUTE = 11;</code>
     */
    boolean hasMINUTE();
    /**
     * <code>required float MINUTE = 11;</code>
     */
    float getMINUTE();

    // required float RUR_URB = 12;
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    boolean hasRURURB();
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    float getRURURB();

    // required float FUNC_SYS = 13;
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    boolean hasFUNCSYS();
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    float getFUNCSYS();

    // required float HARM_EV = 14;
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    boolean hasHARMEV();
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    float getHARMEV();

    // required float MAN_COLL = 15;
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    boolean hasMANCOLL();
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    float getMANCOLL();

    // required float SCH_BUS = 16;
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    boolean hasSCHBUS();
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    float getSCHBUS();

    // required float MAKE = 17;
    /**
     * <code>required float MAKE = 17;</code>
     */
    boolean hasMAKE();
    /**
     * <code>required float MAKE = 17;</code>
     */
    float getMAKE();

    // required float MAK_MOD = 18;
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    boolean hasMAKMOD();
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    float getMAKMOD();

    // required float BODY_TYP = 19;
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    boolean hasBODYTYP();
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    float getBODYTYP();

    // required float MOD_YEAR = 20;
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    boolean hasMODYEAR();
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    float getMODYEAR();

    // required float TOW_VEH = 21;
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    boolean hasTOWVEH();
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    float getTOWVEH();

    // required float SPEC_USE = 22;
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    boolean hasSPECUSE();
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    float getSPECUSE();

    // required float EMER_USE = 23;
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    boolean hasEMERUSE();
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    float getEMERUSE();

    // required float ROLLOVER = 24;
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    boolean hasROLLOVER();
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    float getROLLOVER();

    // required float IMPACT1 = 25;
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    boolean hasIMPACT1();
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    float getIMPACT1();

    // required float FIRE_EXP = 26;
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    boolean hasFIREEXP();
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    float getFIREEXP();

    // required float AGE = 27;
    /**
     * <code>required float AGE = 27;</code>
     */
    boolean hasAGE();
    /**
     * <code>required float AGE = 27;</code>
     */
    float getAGE();

    // required float SEX = 28;
    /**
     * <code>required float SEX = 28;</code>
     */
    boolean hasSEX();
    /**
     * <code>required float SEX = 28;</code>
     */
    float getSEX();

    // required float PER_TYP = 29;
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    boolean hasPERTYP();
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    float getPERTYP();

    // required float INJ_SEV = 30;
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    boolean hasINJSEV();
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    float getINJSEV();

    // required float SEAT_POS = 31;
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    boolean hasSEATPOS();
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    float getSEATPOS();

    // required float REST_USE = 32;
    /**
     * <code>required float REST_USE = 32;</code>
     */
    boolean hasRESTUSE();
    /**
     * <code>required float REST_USE = 32;</code>
     */
    float getRESTUSE();

    // required float REST_MIS = 33;
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    boolean hasRESTMIS();
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    float getRESTMIS();

    // required float AIR_BAG = 34;
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    boolean hasAIRBAG();
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    float getAIRBAG();

    // required float EJECTION = 35;
    /**
     * <code>required float EJECTION = 35;</code>
     */
    boolean hasEJECTION();
    /**
     * <code>required float EJECTION = 35;</code>
     */
    float getEJECTION();

    // required float EJ_PATH = 36;
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    boolean hasEJPATH();
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    float getEJPATH();

    // required float EXTRICAT = 37;
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    boolean hasEXTRICAT();
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    float getEXTRICAT();

    // required float DRINKING = 38;
    /**
     * <code>required float DRINKING = 38;</code>
     */
    boolean hasDRINKING();
    /**
     * <code>required float DRINKING = 38;</code>
     */
    float getDRINKING();

    // required float ALC_DET = 39;
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    boolean hasALCDET();
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    float getALCDET();

    // required float ALC_STATUS = 40;
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    boolean hasALCSTATUS();
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    float getALCSTATUS();

    // required float ATST_TYP = 41;
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    boolean hasATSTTYP();
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    float getATSTTYP();

    // required float ALC_RES = 42;
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    boolean hasALCRES();
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    float getALCRES();

    // required float DRUGS = 43;
    /**
     * <code>required float DRUGS = 43;</code>
     */
    boolean hasDRUGS();
    /**
     * <code>required float DRUGS = 43;</code>
     */
    float getDRUGS();

    // required float DRUG_DET = 44;
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    boolean hasDRUGDET();
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    float getDRUGDET();

    // required float DSTATUS = 45;
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    boolean hasDSTATUS();
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    float getDSTATUS();

    // optional float DRUGTST1 = 46;
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    boolean hasDRUGTST1();
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    float getDRUGTST1();

    // optional float DRUGTST2 = 47;
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    boolean hasDRUGTST2();
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    float getDRUGTST2();

    // optional float DRUGTST3 = 48;
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    boolean hasDRUGTST3();
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    float getDRUGTST3();

    // optional float DRUGRES1 = 49;
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    boolean hasDRUGRES1();
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    float getDRUGRES1();

    // optional float DRUGRES2 = 50;
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    boolean hasDRUGRES2();
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    float getDRUGRES2();

    // optional float DRUGRES3 = 51;
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    boolean hasDRUGRES3();
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    float getDRUGRES3();

    // required float HOSPITAL = 52;
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    boolean hasHOSPITAL();
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    float getHOSPITAL();

    // required float DOA = 53;
    /**
     * <code>required float DOA = 53;</code>
     */
    boolean hasDOA();
    /**
     * <code>required float DOA = 53;</code>
     */
    float getDOA();

    // required float DEATH_DA = 54;
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    boolean hasDEATHDA();
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    float getDEATHDA();

    // required float DEATH_MO = 55;
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    boolean hasDEATHMO();
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    float getDEATHMO();

    // required float DEATH_YR = 56;
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    boolean hasDEATHYR();
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    float getDEATHYR();

    // required float DEATH_HR = 57;
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    boolean hasDEATHHR();
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    float getDEATHHR();

    // required float DEATH_MN = 58;
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    boolean hasDEATHMN();
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    float getDEATHMN();

    // required float DEATH_TM = 59;
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    boolean hasDEATHTM();
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    float getDEATHTM();

    // required float LAG_HRS = 60;
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    boolean hasLAGHRS();
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    float getLAGHRS();

    // required float LAG_MINS = 61;
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    boolean hasLAGMINS();
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    float getLAGMINS();

    // required float P_SF1 = 62;
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    boolean hasPSF1();
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    float getPSF1();

    // optional float P_SF2 = 63;
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    boolean hasPSF2();
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    float getPSF2();

    // optional float P_SF3 = 64;
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    boolean hasPSF3();
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    float getPSF3();

    // required float WORK_INJ = 65;
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    boolean hasWORKINJ();
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    float getWORKINJ();

    // required float HISPANIC = 66;
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    boolean hasHISPANIC();
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    float getHISPANIC();

    // required float RACE = 67;
    /**
     * <code>required float RACE = 67;</code>
     */
    boolean hasRACE();
    /**
     * <code>required float RACE = 67;</code>
     */
    float getRACE();

    // required float LOCATION = 68;
    /**
     * <code>required float LOCATION = 68;</code>
     */
    boolean hasLOCATION();
    /**
     * <code>required float LOCATION = 68;</code>
     */
    float getLOCATION();
  }
  /**
   * Protobuf type {@code boa.types.transportation.Person}
   */
  public static final class Person extends
      com.google.protobuf.GeneratedMessage
      implements PersonOrBuilder {
    // Use Person.newBuilder() to construct.
    private Person(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Person(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Person defaultInstance;
    public static Person getDefaultInstance() {
      return defaultInstance;
    }

    public Person getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Person(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      int mutable_bitField2_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              boa.types.transportation.State.STATE value = boa.types.transportation.State.STATE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                state_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              sTCASE_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              vEFORMS_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              vEHNO_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              pERNO_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              sTRVEH_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              cOUNTY_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              dAY_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              mONTH_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              hOUR_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              mINUTE_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              rURURB_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              fUNCSYS_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              hARMEV_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              mANCOLL_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00008000;
              sCHBUS_ = input.readFloat();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              mAKE_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              mAKMOD_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              bODYTYP_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              mODYEAR_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00100000;
              tOWVEH_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00200000;
              sPECUSE_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              eMERUSE_ = input.readFloat();
              break;
            }
            case 197: {
              bitField0_ |= 0x00800000;
              rOLLOVER_ = input.readFloat();
              break;
            }
            case 205: {
              bitField0_ |= 0x01000000;
              iMPACT1_ = input.readFloat();
              break;
            }
            case 213: {
              bitField0_ |= 0x02000000;
              fIREEXP_ = input.readFloat();
              break;
            }
            case 221: {
              bitField0_ |= 0x04000000;
              aGE_ = input.readFloat();
              break;
            }
            case 229: {
              bitField0_ |= 0x08000000;
              sEX_ = input.readFloat();
              break;
            }
            case 237: {
              bitField0_ |= 0x10000000;
              pERTYP_ = input.readFloat();
              break;
            }
            case 245: {
              bitField0_ |= 0x20000000;
              iNJSEV_ = input.readFloat();
              break;
            }
            case 253: {
              bitField0_ |= 0x40000000;
              sEATPOS_ = input.readFloat();
              break;
            }
            case 261: {
              bitField0_ |= 0x80000000;
              rESTUSE_ = input.readFloat();
              break;
            }
            case 269: {
              bitField1_ |= 0x00000001;
              rESTMIS_ = input.readFloat();
              break;
            }
            case 277: {
              bitField1_ |= 0x00000002;
              aIRBAG_ = input.readFloat();
              break;
            }
            case 285: {
              bitField1_ |= 0x00000004;
              eJECTION_ = input.readFloat();
              break;
            }
            case 293: {
              bitField1_ |= 0x00000008;
              eJPATH_ = input.readFloat();
              break;
            }
            case 301: {
              bitField1_ |= 0x00000010;
              eXTRICAT_ = input.readFloat();
              break;
            }
            case 309: {
              bitField1_ |= 0x00000020;
              dRINKING_ = input.readFloat();
              break;
            }
            case 317: {
              bitField1_ |= 0x00000040;
              aLCDET_ = input.readFloat();
              break;
            }
            case 325: {
              bitField1_ |= 0x00000080;
              aLCSTATUS_ = input.readFloat();
              break;
            }
            case 333: {
              bitField1_ |= 0x00000100;
              aTSTTYP_ = input.readFloat();
              break;
            }
            case 341: {
              bitField1_ |= 0x00000200;
              aLCRES_ = input.readFloat();
              break;
            }
            case 349: {
              bitField1_ |= 0x00000400;
              dRUGS_ = input.readFloat();
              break;
            }
            case 357: {
              bitField1_ |= 0x00000800;
              dRUGDET_ = input.readFloat();
              break;
            }
            case 365: {
              bitField1_ |= 0x00001000;
              dSTATUS_ = input.readFloat();
              break;
            }
            case 373: {
              bitField1_ |= 0x00002000;
              dRUGTST1_ = input.readFloat();
              break;
            }
            case 381: {
              bitField1_ |= 0x00004000;
              dRUGTST2_ = input.readFloat();
              break;
            }
            case 389: {
              bitField1_ |= 0x00008000;
              dRUGTST3_ = input.readFloat();
              break;
            }
            case 397: {
              bitField1_ |= 0x00010000;
              dRUGRES1_ = input.readFloat();
              break;
            }
            case 405: {
              bitField1_ |= 0x00020000;
              dRUGRES2_ = input.readFloat();
              break;
            }
            case 413: {
              bitField1_ |= 0x00040000;
              dRUGRES3_ = input.readFloat();
              break;
            }
            case 421: {
              bitField1_ |= 0x00080000;
              hOSPITAL_ = input.readFloat();
              break;
            }
            case 429: {
              bitField1_ |= 0x00100000;
              dOA_ = input.readFloat();
              break;
            }
            case 437: {
              bitField1_ |= 0x00200000;
              dEATHDA_ = input.readFloat();
              break;
            }
            case 445: {
              bitField1_ |= 0x00400000;
              dEATHMO_ = input.readFloat();
              break;
            }
            case 453: {
              bitField1_ |= 0x00800000;
              dEATHYR_ = input.readFloat();
              break;
            }
            case 461: {
              bitField1_ |= 0x01000000;
              dEATHHR_ = input.readFloat();
              break;
            }
            case 469: {
              bitField1_ |= 0x02000000;
              dEATHMN_ = input.readFloat();
              break;
            }
            case 477: {
              bitField1_ |= 0x04000000;
              dEATHTM_ = input.readFloat();
              break;
            }
            case 485: {
              bitField1_ |= 0x08000000;
              lAGHRS_ = input.readFloat();
              break;
            }
            case 493: {
              bitField1_ |= 0x10000000;
              lAGMINS_ = input.readFloat();
              break;
            }
            case 501: {
              bitField1_ |= 0x20000000;
              pSF1_ = input.readFloat();
              break;
            }
            case 509: {
              bitField1_ |= 0x40000000;
              pSF2_ = input.readFloat();
              break;
            }
            case 517: {
              bitField1_ |= 0x80000000;
              pSF3_ = input.readFloat();
              break;
            }
            case 525: {
              bitField2_ |= 0x00000001;
              wORKINJ_ = input.readFloat();
              break;
            }
            case 533: {
              bitField2_ |= 0x00000002;
              hISPANIC_ = input.readFloat();
              break;
            }
            case 541: {
              bitField2_ |= 0x00000004;
              rACE_ = input.readFloat();
              break;
            }
            case 549: {
              bitField2_ |= 0x00000008;
              lOCATION_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boa.types.transportation.Individual.internal_static_boa_types_transportation_Person_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boa.types.transportation.Individual.internal_static_boa_types_transportation_Person_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boa.types.transportation.Individual.Person.class, boa.types.transportation.Individual.Person.Builder.class);
    }

    public static com.google.protobuf.Parser<Person> PARSER =
        new com.google.protobuf.AbstractParser<Person>() {
      public Person parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Person(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Person> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    // required .boa.types.transportation.STATE state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boa.types.transportation.State.STATE state_;
    /**
     * <code>required .boa.types.transportation.STATE state = 1;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boa.types.transportation.STATE state = 1;</code>
     */
    public boa.types.transportation.State.STATE getState() {
      return state_;
    }

    // required float ST_CASE = 2;
    public static final int ST_CASE_FIELD_NUMBER = 2;
    private float sTCASE_;
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    public boolean hasSTCASE() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float ST_CASE = 2;</code>
     */
    public float getSTCASE() {
      return sTCASE_;
    }

    // required float VE_FORMS = 3;
    public static final int VE_FORMS_FIELD_NUMBER = 3;
    private float vEFORMS_;
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    public boolean hasVEFORMS() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float VE_FORMS = 3;</code>
     */
    public float getVEFORMS() {
      return vEFORMS_;
    }

    // required float VEH_NO = 4;
    public static final int VEH_NO_FIELD_NUMBER = 4;
    private float vEHNO_;
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    public boolean hasVEHNO() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float VEH_NO = 4;</code>
     */
    public float getVEHNO() {
      return vEHNO_;
    }

    // required float PER_NO = 5;
    public static final int PER_NO_FIELD_NUMBER = 5;
    private float pERNO_;
    /**
     * <code>required float PER_NO = 5;</code>
     */
    public boolean hasPERNO() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float PER_NO = 5;</code>
     */
    public float getPERNO() {
      return pERNO_;
    }

    // required float STR_VEH = 6;
    public static final int STR_VEH_FIELD_NUMBER = 6;
    private float sTRVEH_;
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    public boolean hasSTRVEH() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float STR_VEH = 6;</code>
     */
    public float getSTRVEH() {
      return sTRVEH_;
    }

    // required float COUNTY = 7;
    public static final int COUNTY_FIELD_NUMBER = 7;
    private float cOUNTY_;
    /**
     * <code>required float COUNTY = 7;</code>
     */
    public boolean hasCOUNTY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float COUNTY = 7;</code>
     */
    public float getCOUNTY() {
      return cOUNTY_;
    }

    // required float DAY = 8;
    public static final int DAY_FIELD_NUMBER = 8;
    private float dAY_;
    /**
     * <code>required float DAY = 8;</code>
     */
    public boolean hasDAY() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float DAY = 8;</code>
     */
    public float getDAY() {
      return dAY_;
    }

    // required float MONTH = 9;
    public static final int MONTH_FIELD_NUMBER = 9;
    private float mONTH_;
    /**
     * <code>required float MONTH = 9;</code>
     */
    public boolean hasMONTH() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float MONTH = 9;</code>
     */
    public float getMONTH() {
      return mONTH_;
    }

    // required float HOUR = 10;
    public static final int HOUR_FIELD_NUMBER = 10;
    private float hOUR_;
    /**
     * <code>required float HOUR = 10;</code>
     */
    public boolean hasHOUR() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required float HOUR = 10;</code>
     */
    public float getHOUR() {
      return hOUR_;
    }

    // required float MINUTE = 11;
    public static final int MINUTE_FIELD_NUMBER = 11;
    private float mINUTE_;
    /**
     * <code>required float MINUTE = 11;</code>
     */
    public boolean hasMINUTE() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required float MINUTE = 11;</code>
     */
    public float getMINUTE() {
      return mINUTE_;
    }

    // required float RUR_URB = 12;
    public static final int RUR_URB_FIELD_NUMBER = 12;
    private float rURURB_;
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    public boolean hasRURURB() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float RUR_URB = 12;</code>
     */
    public float getRURURB() {
      return rURURB_;
    }

    // required float FUNC_SYS = 13;
    public static final int FUNC_SYS_FIELD_NUMBER = 13;
    private float fUNCSYS_;
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    public boolean hasFUNCSYS() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required float FUNC_SYS = 13;</code>
     */
    public float getFUNCSYS() {
      return fUNCSYS_;
    }

    // required float HARM_EV = 14;
    public static final int HARM_EV_FIELD_NUMBER = 14;
    private float hARMEV_;
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    public boolean hasHARMEV() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>required float HARM_EV = 14;</code>
     */
    public float getHARMEV() {
      return hARMEV_;
    }

    // required float MAN_COLL = 15;
    public static final int MAN_COLL_FIELD_NUMBER = 15;
    private float mANCOLL_;
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    public boolean hasMANCOLL() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>required float MAN_COLL = 15;</code>
     */
    public float getMANCOLL() {
      return mANCOLL_;
    }

    // required float SCH_BUS = 16;
    public static final int SCH_BUS_FIELD_NUMBER = 16;
    private float sCHBUS_;
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    public boolean hasSCHBUS() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>required float SCH_BUS = 16;</code>
     */
    public float getSCHBUS() {
      return sCHBUS_;
    }

    // required float MAKE = 17;
    public static final int MAKE_FIELD_NUMBER = 17;
    private float mAKE_;
    /**
     * <code>required float MAKE = 17;</code>
     */
    public boolean hasMAKE() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>required float MAKE = 17;</code>
     */
    public float getMAKE() {
      return mAKE_;
    }

    // required float MAK_MOD = 18;
    public static final int MAK_MOD_FIELD_NUMBER = 18;
    private float mAKMOD_;
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    public boolean hasMAKMOD() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>required float MAK_MOD = 18;</code>
     */
    public float getMAKMOD() {
      return mAKMOD_;
    }

    // required float BODY_TYP = 19;
    public static final int BODY_TYP_FIELD_NUMBER = 19;
    private float bODYTYP_;
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    public boolean hasBODYTYP() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>required float BODY_TYP = 19;</code>
     */
    public float getBODYTYP() {
      return bODYTYP_;
    }

    // required float MOD_YEAR = 20;
    public static final int MOD_YEAR_FIELD_NUMBER = 20;
    private float mODYEAR_;
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    public boolean hasMODYEAR() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required float MOD_YEAR = 20;</code>
     */
    public float getMODYEAR() {
      return mODYEAR_;
    }

    // required float TOW_VEH = 21;
    public static final int TOW_VEH_FIELD_NUMBER = 21;
    private float tOWVEH_;
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    public boolean hasTOWVEH() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required float TOW_VEH = 21;</code>
     */
    public float getTOWVEH() {
      return tOWVEH_;
    }

    // required float SPEC_USE = 22;
    public static final int SPEC_USE_FIELD_NUMBER = 22;
    private float sPECUSE_;
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    public boolean hasSPECUSE() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required float SPEC_USE = 22;</code>
     */
    public float getSPECUSE() {
      return sPECUSE_;
    }

    // required float EMER_USE = 23;
    public static final int EMER_USE_FIELD_NUMBER = 23;
    private float eMERUSE_;
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    public boolean hasEMERUSE() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required float EMER_USE = 23;</code>
     */
    public float getEMERUSE() {
      return eMERUSE_;
    }

    // required float ROLLOVER = 24;
    public static final int ROLLOVER_FIELD_NUMBER = 24;
    private float rOLLOVER_;
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    public boolean hasROLLOVER() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required float ROLLOVER = 24;</code>
     */
    public float getROLLOVER() {
      return rOLLOVER_;
    }

    // required float IMPACT1 = 25;
    public static final int IMPACT1_FIELD_NUMBER = 25;
    private float iMPACT1_;
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    public boolean hasIMPACT1() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required float IMPACT1 = 25;</code>
     */
    public float getIMPACT1() {
      return iMPACT1_;
    }

    // required float FIRE_EXP = 26;
    public static final int FIRE_EXP_FIELD_NUMBER = 26;
    private float fIREEXP_;
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    public boolean hasFIREEXP() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required float FIRE_EXP = 26;</code>
     */
    public float getFIREEXP() {
      return fIREEXP_;
    }

    // required float AGE = 27;
    public static final int AGE_FIELD_NUMBER = 27;
    private float aGE_;
    /**
     * <code>required float AGE = 27;</code>
     */
    public boolean hasAGE() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required float AGE = 27;</code>
     */
    public float getAGE() {
      return aGE_;
    }

    // required float SEX = 28;
    public static final int SEX_FIELD_NUMBER = 28;
    private float sEX_;
    /**
     * <code>required float SEX = 28;</code>
     */
    public boolean hasSEX() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required float SEX = 28;</code>
     */
    public float getSEX() {
      return sEX_;
    }

    // required float PER_TYP = 29;
    public static final int PER_TYP_FIELD_NUMBER = 29;
    private float pERTYP_;
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    public boolean hasPERTYP() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required float PER_TYP = 29;</code>
     */
    public float getPERTYP() {
      return pERTYP_;
    }

    // required float INJ_SEV = 30;
    public static final int INJ_SEV_FIELD_NUMBER = 30;
    private float iNJSEV_;
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    public boolean hasINJSEV() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required float INJ_SEV = 30;</code>
     */
    public float getINJSEV() {
      return iNJSEV_;
    }

    // required float SEAT_POS = 31;
    public static final int SEAT_POS_FIELD_NUMBER = 31;
    private float sEATPOS_;
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    public boolean hasSEATPOS() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>required float SEAT_POS = 31;</code>
     */
    public float getSEATPOS() {
      return sEATPOS_;
    }

    // required float REST_USE = 32;
    public static final int REST_USE_FIELD_NUMBER = 32;
    private float rESTUSE_;
    /**
     * <code>required float REST_USE = 32;</code>
     */
    public boolean hasRESTUSE() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>required float REST_USE = 32;</code>
     */
    public float getRESTUSE() {
      return rESTUSE_;
    }

    // required float REST_MIS = 33;
    public static final int REST_MIS_FIELD_NUMBER = 33;
    private float rESTMIS_;
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    public boolean hasRESTMIS() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float REST_MIS = 33;</code>
     */
    public float getRESTMIS() {
      return rESTMIS_;
    }

    // required float AIR_BAG = 34;
    public static final int AIR_BAG_FIELD_NUMBER = 34;
    private float aIRBAG_;
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    public boolean hasAIRBAG() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float AIR_BAG = 34;</code>
     */
    public float getAIRBAG() {
      return aIRBAG_;
    }

    // required float EJECTION = 35;
    public static final int EJECTION_FIELD_NUMBER = 35;
    private float eJECTION_;
    /**
     * <code>required float EJECTION = 35;</code>
     */
    public boolean hasEJECTION() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float EJECTION = 35;</code>
     */
    public float getEJECTION() {
      return eJECTION_;
    }

    // required float EJ_PATH = 36;
    public static final int EJ_PATH_FIELD_NUMBER = 36;
    private float eJPATH_;
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    public boolean hasEJPATH() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float EJ_PATH = 36;</code>
     */
    public float getEJPATH() {
      return eJPATH_;
    }

    // required float EXTRICAT = 37;
    public static final int EXTRICAT_FIELD_NUMBER = 37;
    private float eXTRICAT_;
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    public boolean hasEXTRICAT() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float EXTRICAT = 37;</code>
     */
    public float getEXTRICAT() {
      return eXTRICAT_;
    }

    // required float DRINKING = 38;
    public static final int DRINKING_FIELD_NUMBER = 38;
    private float dRINKING_;
    /**
     * <code>required float DRINKING = 38;</code>
     */
    public boolean hasDRINKING() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float DRINKING = 38;</code>
     */
    public float getDRINKING() {
      return dRINKING_;
    }

    // required float ALC_DET = 39;
    public static final int ALC_DET_FIELD_NUMBER = 39;
    private float aLCDET_;
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    public boolean hasALCDET() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required float ALC_DET = 39;</code>
     */
    public float getALCDET() {
      return aLCDET_;
    }

    // required float ALC_STATUS = 40;
    public static final int ALC_STATUS_FIELD_NUMBER = 40;
    private float aLCSTATUS_;
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    public boolean hasALCSTATUS() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required float ALC_STATUS = 40;</code>
     */
    public float getALCSTATUS() {
      return aLCSTATUS_;
    }

    // required float ATST_TYP = 41;
    public static final int ATST_TYP_FIELD_NUMBER = 41;
    private float aTSTTYP_;
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    public boolean hasATSTTYP() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required float ATST_TYP = 41;</code>
     */
    public float getATSTTYP() {
      return aTSTTYP_;
    }

    // required float ALC_RES = 42;
    public static final int ALC_RES_FIELD_NUMBER = 42;
    private float aLCRES_;
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    public boolean hasALCRES() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required float ALC_RES = 42;</code>
     */
    public float getALCRES() {
      return aLCRES_;
    }

    // required float DRUGS = 43;
    public static final int DRUGS_FIELD_NUMBER = 43;
    private float dRUGS_;
    /**
     * <code>required float DRUGS = 43;</code>
     */
    public boolean hasDRUGS() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required float DRUGS = 43;</code>
     */
    public float getDRUGS() {
      return dRUGS_;
    }

    // required float DRUG_DET = 44;
    public static final int DRUG_DET_FIELD_NUMBER = 44;
    private float dRUGDET_;
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    public boolean hasDRUGDET() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required float DRUG_DET = 44;</code>
     */
    public float getDRUGDET() {
      return dRUGDET_;
    }

    // required float DSTATUS = 45;
    public static final int DSTATUS_FIELD_NUMBER = 45;
    private float dSTATUS_;
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    public boolean hasDSTATUS() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>required float DSTATUS = 45;</code>
     */
    public float getDSTATUS() {
      return dSTATUS_;
    }

    // optional float DRUGTST1 = 46;
    public static final int DRUGTST1_FIELD_NUMBER = 46;
    private float dRUGTST1_;
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    public boolean hasDRUGTST1() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float DRUGTST1 = 46;</code>
     */
    public float getDRUGTST1() {
      return dRUGTST1_;
    }

    // optional float DRUGTST2 = 47;
    public static final int DRUGTST2_FIELD_NUMBER = 47;
    private float dRUGTST2_;
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    public boolean hasDRUGTST2() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float DRUGTST2 = 47;</code>
     */
    public float getDRUGTST2() {
      return dRUGTST2_;
    }

    // optional float DRUGTST3 = 48;
    public static final int DRUGTST3_FIELD_NUMBER = 48;
    private float dRUGTST3_;
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    public boolean hasDRUGTST3() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional float DRUGTST3 = 48;</code>
     */
    public float getDRUGTST3() {
      return dRUGTST3_;
    }

    // optional float DRUGRES1 = 49;
    public static final int DRUGRES1_FIELD_NUMBER = 49;
    private float dRUGRES1_;
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    public boolean hasDRUGRES1() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float DRUGRES1 = 49;</code>
     */
    public float getDRUGRES1() {
      return dRUGRES1_;
    }

    // optional float DRUGRES2 = 50;
    public static final int DRUGRES2_FIELD_NUMBER = 50;
    private float dRUGRES2_;
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    public boolean hasDRUGRES2() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float DRUGRES2 = 50;</code>
     */
    public float getDRUGRES2() {
      return dRUGRES2_;
    }

    // optional float DRUGRES3 = 51;
    public static final int DRUGRES3_FIELD_NUMBER = 51;
    private float dRUGRES3_;
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    public boolean hasDRUGRES3() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float DRUGRES3 = 51;</code>
     */
    public float getDRUGRES3() {
      return dRUGRES3_;
    }

    // required float HOSPITAL = 52;
    public static final int HOSPITAL_FIELD_NUMBER = 52;
    private float hOSPITAL_;
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    public boolean hasHOSPITAL() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>required float HOSPITAL = 52;</code>
     */
    public float getHOSPITAL() {
      return hOSPITAL_;
    }

    // required float DOA = 53;
    public static final int DOA_FIELD_NUMBER = 53;
    private float dOA_;
    /**
     * <code>required float DOA = 53;</code>
     */
    public boolean hasDOA() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>required float DOA = 53;</code>
     */
    public float getDOA() {
      return dOA_;
    }

    // required float DEATH_DA = 54;
    public static final int DEATH_DA_FIELD_NUMBER = 54;
    private float dEATHDA_;
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    public boolean hasDEATHDA() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>required float DEATH_DA = 54;</code>
     */
    public float getDEATHDA() {
      return dEATHDA_;
    }

    // required float DEATH_MO = 55;
    public static final int DEATH_MO_FIELD_NUMBER = 55;
    private float dEATHMO_;
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    public boolean hasDEATHMO() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>required float DEATH_MO = 55;</code>
     */
    public float getDEATHMO() {
      return dEATHMO_;
    }

    // required float DEATH_YR = 56;
    public static final int DEATH_YR_FIELD_NUMBER = 56;
    private float dEATHYR_;
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    public boolean hasDEATHYR() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>required float DEATH_YR = 56;</code>
     */
    public float getDEATHYR() {
      return dEATHYR_;
    }

    // required float DEATH_HR = 57;
    public static final int DEATH_HR_FIELD_NUMBER = 57;
    private float dEATHHR_;
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    public boolean hasDEATHHR() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>required float DEATH_HR = 57;</code>
     */
    public float getDEATHHR() {
      return dEATHHR_;
    }

    // required float DEATH_MN = 58;
    public static final int DEATH_MN_FIELD_NUMBER = 58;
    private float dEATHMN_;
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    public boolean hasDEATHMN() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>required float DEATH_MN = 58;</code>
     */
    public float getDEATHMN() {
      return dEATHMN_;
    }

    // required float DEATH_TM = 59;
    public static final int DEATH_TM_FIELD_NUMBER = 59;
    private float dEATHTM_;
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    public boolean hasDEATHTM() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>required float DEATH_TM = 59;</code>
     */
    public float getDEATHTM() {
      return dEATHTM_;
    }

    // required float LAG_HRS = 60;
    public static final int LAG_HRS_FIELD_NUMBER = 60;
    private float lAGHRS_;
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    public boolean hasLAGHRS() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>required float LAG_HRS = 60;</code>
     */
    public float getLAGHRS() {
      return lAGHRS_;
    }

    // required float LAG_MINS = 61;
    public static final int LAG_MINS_FIELD_NUMBER = 61;
    private float lAGMINS_;
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    public boolean hasLAGMINS() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>required float LAG_MINS = 61;</code>
     */
    public float getLAGMINS() {
      return lAGMINS_;
    }

    // required float P_SF1 = 62;
    public static final int P_SF1_FIELD_NUMBER = 62;
    private float pSF1_;
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    public boolean hasPSF1() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>required float P_SF1 = 62;</code>
     */
    public float getPSF1() {
      return pSF1_;
    }

    // optional float P_SF2 = 63;
    public static final int P_SF2_FIELD_NUMBER = 63;
    private float pSF2_;
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    public boolean hasPSF2() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional float P_SF2 = 63;</code>
     */
    public float getPSF2() {
      return pSF2_;
    }

    // optional float P_SF3 = 64;
    public static final int P_SF3_FIELD_NUMBER = 64;
    private float pSF3_;
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    public boolean hasPSF3() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional float P_SF3 = 64;</code>
     */
    public float getPSF3() {
      return pSF3_;
    }

    // required float WORK_INJ = 65;
    public static final int WORK_INJ_FIELD_NUMBER = 65;
    private float wORKINJ_;
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    public boolean hasWORKINJ() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float WORK_INJ = 65;</code>
     */
    public float getWORKINJ() {
      return wORKINJ_;
    }

    // required float HISPANIC = 66;
    public static final int HISPANIC_FIELD_NUMBER = 66;
    private float hISPANIC_;
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    public boolean hasHISPANIC() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float HISPANIC = 66;</code>
     */
    public float getHISPANIC() {
      return hISPANIC_;
    }

    // required float RACE = 67;
    public static final int RACE_FIELD_NUMBER = 67;
    private float rACE_;
    /**
     * <code>required float RACE = 67;</code>
     */
    public boolean hasRACE() {
      return ((bitField2_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float RACE = 67;</code>
     */
    public float getRACE() {
      return rACE_;
    }

    // required float LOCATION = 68;
    public static final int LOCATION_FIELD_NUMBER = 68;
    private float lOCATION_;
    /**
     * <code>required float LOCATION = 68;</code>
     */
    public boolean hasLOCATION() {
      return ((bitField2_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float LOCATION = 68;</code>
     */
    public float getLOCATION() {
      return lOCATION_;
    }

    private void initFields() {
      state_ = boa.types.transportation.State.STATE.Alabama;
      sTCASE_ = 0F;
      vEFORMS_ = 0F;
      vEHNO_ = 0F;
      pERNO_ = 0F;
      sTRVEH_ = 0F;
      cOUNTY_ = 0F;
      dAY_ = 0F;
      mONTH_ = 0F;
      hOUR_ = 0F;
      mINUTE_ = 0F;
      rURURB_ = 0F;
      fUNCSYS_ = 0F;
      hARMEV_ = 0F;
      mANCOLL_ = 0F;
      sCHBUS_ = 0F;
      mAKE_ = 0F;
      mAKMOD_ = 0F;
      bODYTYP_ = 0F;
      mODYEAR_ = 0F;
      tOWVEH_ = 0F;
      sPECUSE_ = 0F;
      eMERUSE_ = 0F;
      rOLLOVER_ = 0F;
      iMPACT1_ = 0F;
      fIREEXP_ = 0F;
      aGE_ = 0F;
      sEX_ = 0F;
      pERTYP_ = 0F;
      iNJSEV_ = 0F;
      sEATPOS_ = 0F;
      rESTUSE_ = 0F;
      rESTMIS_ = 0F;
      aIRBAG_ = 0F;
      eJECTION_ = 0F;
      eJPATH_ = 0F;
      eXTRICAT_ = 0F;
      dRINKING_ = 0F;
      aLCDET_ = 0F;
      aLCSTATUS_ = 0F;
      aTSTTYP_ = 0F;
      aLCRES_ = 0F;
      dRUGS_ = 0F;
      dRUGDET_ = 0F;
      dSTATUS_ = 0F;
      dRUGTST1_ = 0F;
      dRUGTST2_ = 0F;
      dRUGTST3_ = 0F;
      dRUGRES1_ = 0F;
      dRUGRES2_ = 0F;
      dRUGRES3_ = 0F;
      hOSPITAL_ = 0F;
      dOA_ = 0F;
      dEATHDA_ = 0F;
      dEATHMO_ = 0F;
      dEATHYR_ = 0F;
      dEATHHR_ = 0F;
      dEATHMN_ = 0F;
      dEATHTM_ = 0F;
      lAGHRS_ = 0F;
      lAGMINS_ = 0F;
      pSF1_ = 0F;
      pSF2_ = 0F;
      pSF3_ = 0F;
      wORKINJ_ = 0F;
      hISPANIC_ = 0F;
      rACE_ = 0F;
      lOCATION_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTCASE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEFORMS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVEHNO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPERNO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSTRVEH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCOUNTY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDAY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMONTH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOUR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMINUTE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRURURB()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFUNCSYS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHARMEV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMANCOLL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSCHBUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAKE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMAKMOD()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBODYTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMODYEAR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTOWVEH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSPECUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEMERUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasROLLOVER()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIMPACT1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFIREEXP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAGE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSEX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPERTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasINJSEV()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSEATPOS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRESTUSE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRESTMIS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAIRBAG()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEJECTION()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEJPATH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEXTRICAT()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRINKING()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasALCDET()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasALCSTATUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasATSTTYP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasALCRES()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRUGS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDRUGDET()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDSTATUS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHOSPITAL()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDOA()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHDA()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHMO()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHYR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHHR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHMN()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDEATHTM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLAGHRS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLAGMINS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPSF1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWORKINJ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHISPANIC()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRACE()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLOCATION()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, vEFORMS_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, vEHNO_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, pERNO_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, sTRVEH_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, cOUNTY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, dAY_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, mONTH_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, hOUR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, mINUTE_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, rURURB_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, fUNCSYS_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, hARMEV_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, mANCOLL_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(16, sCHBUS_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, mAKE_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, mAKMOD_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, bODYTYP_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, mODYEAR_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(21, tOWVEH_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(22, sPECUSE_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, eMERUSE_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(24, rOLLOVER_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(25, iMPACT1_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(26, fIREEXP_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(27, aGE_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(28, sEX_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(29, pERTYP_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(30, iNJSEV_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(31, sEATPOS_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(32, rESTUSE_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(33, rESTMIS_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(34, aIRBAG_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(35, eJECTION_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(36, eJPATH_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(37, eXTRICAT_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(38, dRINKING_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(39, aLCDET_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(40, aLCSTATUS_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(41, aTSTTYP_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(42, aLCRES_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(43, dRUGS_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(44, dRUGDET_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(45, dSTATUS_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(46, dRUGTST1_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(47, dRUGTST2_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeFloat(48, dRUGTST3_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(49, dRUGRES1_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(50, dRUGRES2_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(51, dRUGRES3_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(52, hOSPITAL_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(53, dOA_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(54, dEATHDA_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(55, dEATHMO_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(56, dEATHYR_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(57, dEATHHR_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeFloat(58, dEATHMN_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeFloat(59, dEATHTM_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeFloat(60, lAGHRS_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeFloat(61, lAGMINS_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeFloat(62, pSF1_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeFloat(63, pSF2_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeFloat(64, pSF3_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(65, wORKINJ_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(66, hISPANIC_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(67, rACE_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(68, lOCATION_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, state_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, sTCASE_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, vEFORMS_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, vEHNO_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, pERNO_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, sTRVEH_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, cOUNTY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, dAY_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, mONTH_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, hOUR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, mINUTE_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, rURURB_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, fUNCSYS_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, hARMEV_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, mANCOLL_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, sCHBUS_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, mAKE_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, mAKMOD_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, bODYTYP_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, mODYEAR_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, tOWVEH_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, sPECUSE_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, eMERUSE_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, rOLLOVER_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, iMPACT1_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, fIREEXP_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(27, aGE_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(28, sEX_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(29, pERTYP_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(30, iNJSEV_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(31, sEATPOS_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(32, rESTUSE_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(33, rESTMIS_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(34, aIRBAG_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(35, eJECTION_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(36, eJPATH_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(37, eXTRICAT_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(38, dRINKING_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(39, aLCDET_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(40, aLCSTATUS_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(41, aTSTTYP_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(42, aLCRES_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(43, dRUGS_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(44, dRUGDET_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(45, dSTATUS_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(46, dRUGTST1_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(47, dRUGTST2_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(48, dRUGTST3_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(49, dRUGRES1_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(50, dRUGRES2_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(51, dRUGRES3_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(52, hOSPITAL_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(53, dOA_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(54, dEATHDA_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(55, dEATHMO_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(56, dEATHYR_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(57, dEATHHR_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(58, dEATHMN_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(59, dEATHTM_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(60, lAGHRS_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(61, lAGMINS_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(62, pSF1_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(63, pSF2_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(64, pSF3_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(65, wORKINJ_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(66, hISPANIC_);
      }
      if (((bitField2_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(67, rACE_);
      }
      if (((bitField2_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(68, lOCATION_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boa.types.transportation.Individual.Person parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.transportation.Individual.Person parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.transportation.Individual.Person parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boa.types.transportation.Individual.Person parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boa.types.transportation.Individual.Person parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.transportation.Individual.Person parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boa.types.transportation.Individual.Person parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boa.types.transportation.Individual.Person parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boa.types.transportation.Individual.Person parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boa.types.transportation.Individual.Person parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boa.types.transportation.Individual.Person prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boa.types.transportation.Person}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boa.types.transportation.Individual.PersonOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boa.types.transportation.Individual.internal_static_boa_types_transportation_Person_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boa.types.transportation.Individual.internal_static_boa_types_transportation_Person_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boa.types.transportation.Individual.Person.class, boa.types.transportation.Individual.Person.Builder.class);
      }

      // Construct using boa.types.transportation.Individual.Person.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        state_ = boa.types.transportation.State.STATE.Alabama;
        bitField0_ = (bitField0_ & ~0x00000001);
        sTCASE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        vEFORMS_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        vEHNO_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        pERNO_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        sTRVEH_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        cOUNTY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        dAY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        mONTH_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        hOUR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        mINUTE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        rURURB_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        fUNCSYS_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        hARMEV_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        mANCOLL_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        sCHBUS_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        mAKE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        mAKMOD_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        bODYTYP_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        mODYEAR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        tOWVEH_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        sPECUSE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        eMERUSE_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        rOLLOVER_ = 0F;
        bitField0_ = (bitField0_ & ~0x00800000);
        iMPACT1_ = 0F;
        bitField0_ = (bitField0_ & ~0x01000000);
        fIREEXP_ = 0F;
        bitField0_ = (bitField0_ & ~0x02000000);
        aGE_ = 0F;
        bitField0_ = (bitField0_ & ~0x04000000);
        sEX_ = 0F;
        bitField0_ = (bitField0_ & ~0x08000000);
        pERTYP_ = 0F;
        bitField0_ = (bitField0_ & ~0x10000000);
        iNJSEV_ = 0F;
        bitField0_ = (bitField0_ & ~0x20000000);
        sEATPOS_ = 0F;
        bitField0_ = (bitField0_ & ~0x40000000);
        rESTUSE_ = 0F;
        bitField0_ = (bitField0_ & ~0x80000000);
        rESTMIS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000001);
        aIRBAG_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000002);
        eJECTION_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000004);
        eJPATH_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000008);
        eXTRICAT_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000010);
        dRINKING_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000020);
        aLCDET_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000040);
        aLCSTATUS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000080);
        aTSTTYP_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000100);
        aLCRES_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000200);
        dRUGS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000400);
        dRUGDET_ = 0F;
        bitField1_ = (bitField1_ & ~0x00000800);
        dSTATUS_ = 0F;
        bitField1_ = (bitField1_ & ~0x00001000);
        dRUGTST1_ = 0F;
        bitField1_ = (bitField1_ & ~0x00002000);
        dRUGTST2_ = 0F;
        bitField1_ = (bitField1_ & ~0x00004000);
        dRUGTST3_ = 0F;
        bitField1_ = (bitField1_ & ~0x00008000);
        dRUGRES1_ = 0F;
        bitField1_ = (bitField1_ & ~0x00010000);
        dRUGRES2_ = 0F;
        bitField1_ = (bitField1_ & ~0x00020000);
        dRUGRES3_ = 0F;
        bitField1_ = (bitField1_ & ~0x00040000);
        hOSPITAL_ = 0F;
        bitField1_ = (bitField1_ & ~0x00080000);
        dOA_ = 0F;
        bitField1_ = (bitField1_ & ~0x00100000);
        dEATHDA_ = 0F;
        bitField1_ = (bitField1_ & ~0x00200000);
        dEATHMO_ = 0F;
        bitField1_ = (bitField1_ & ~0x00400000);
        dEATHYR_ = 0F;
        bitField1_ = (bitField1_ & ~0x00800000);
        dEATHHR_ = 0F;
        bitField1_ = (bitField1_ & ~0x01000000);
        dEATHMN_ = 0F;
        bitField1_ = (bitField1_ & ~0x02000000);
        dEATHTM_ = 0F;
        bitField1_ = (bitField1_ & ~0x04000000);
        lAGHRS_ = 0F;
        bitField1_ = (bitField1_ & ~0x08000000);
        lAGMINS_ = 0F;
        bitField1_ = (bitField1_ & ~0x10000000);
        pSF1_ = 0F;
        bitField1_ = (bitField1_ & ~0x20000000);
        pSF2_ = 0F;
        bitField1_ = (bitField1_ & ~0x40000000);
        pSF3_ = 0F;
        bitField1_ = (bitField1_ & ~0x80000000);
        wORKINJ_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000001);
        hISPANIC_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000002);
        rACE_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000004);
        lOCATION_ = 0F;
        bitField2_ = (bitField2_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boa.types.transportation.Individual.internal_static_boa_types_transportation_Person_descriptor;
      }

      public boa.types.transportation.Individual.Person getDefaultInstanceForType() {
        return boa.types.transportation.Individual.Person.getDefaultInstance();
      }

      public boa.types.transportation.Individual.Person build() {
        boa.types.transportation.Individual.Person result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boa.types.transportation.Individual.Person buildPartial() {
        boa.types.transportation.Individual.Person result = new boa.types.transportation.Individual.Person(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sTCASE_ = sTCASE_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.vEFORMS_ = vEFORMS_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.vEHNO_ = vEHNO_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pERNO_ = pERNO_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.sTRVEH_ = sTRVEH_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cOUNTY_ = cOUNTY_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.dAY_ = dAY_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.mONTH_ = mONTH_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.hOUR_ = hOUR_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.mINUTE_ = mINUTE_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rURURB_ = rURURB_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.fUNCSYS_ = fUNCSYS_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.hARMEV_ = hARMEV_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.mANCOLL_ = mANCOLL_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.sCHBUS_ = sCHBUS_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.mAKE_ = mAKE_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.mAKMOD_ = mAKMOD_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.bODYTYP_ = bODYTYP_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.mODYEAR_ = mODYEAR_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.tOWVEH_ = tOWVEH_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.sPECUSE_ = sPECUSE_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.eMERUSE_ = eMERUSE_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.rOLLOVER_ = rOLLOVER_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.iMPACT1_ = iMPACT1_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.fIREEXP_ = fIREEXP_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.aGE_ = aGE_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.sEX_ = sEX_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.pERTYP_ = pERTYP_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.iNJSEV_ = iNJSEV_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.sEATPOS_ = sEATPOS_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.rESTUSE_ = rESTUSE_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.rESTMIS_ = rESTMIS_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.aIRBAG_ = aIRBAG_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.eJECTION_ = eJECTION_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.eJPATH_ = eJPATH_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.eXTRICAT_ = eXTRICAT_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.dRINKING_ = dRINKING_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.aLCDET_ = aLCDET_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.aLCSTATUS_ = aLCSTATUS_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.aTSTTYP_ = aTSTTYP_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.aLCRES_ = aLCRES_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.dRUGS_ = dRUGS_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.dRUGDET_ = dRUGDET_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.dSTATUS_ = dSTATUS_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.dRUGTST1_ = dRUGTST1_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.dRUGTST2_ = dRUGTST2_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.dRUGTST3_ = dRUGTST3_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.dRUGRES1_ = dRUGRES1_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.dRUGRES2_ = dRUGRES2_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.dRUGRES3_ = dRUGRES3_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.hOSPITAL_ = hOSPITAL_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.dOA_ = dOA_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.dEATHDA_ = dEATHDA_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.dEATHMO_ = dEATHMO_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.dEATHYR_ = dEATHYR_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.dEATHHR_ = dEATHHR_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.dEATHMN_ = dEATHMN_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.dEATHTM_ = dEATHTM_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.lAGHRS_ = lAGHRS_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.lAGMINS_ = lAGMINS_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.pSF1_ = pSF1_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.pSF2_ = pSF2_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.pSF3_ = pSF3_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.wORKINJ_ = wORKINJ_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.hISPANIC_ = hISPANIC_;
        if (((from_bitField2_ & 0x00000004) == 0x00000004)) {
          to_bitField2_ |= 0x00000004;
        }
        result.rACE_ = rACE_;
        if (((from_bitField2_ & 0x00000008) == 0x00000008)) {
          to_bitField2_ |= 0x00000008;
        }
        result.lOCATION_ = lOCATION_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boa.types.transportation.Individual.Person) {
          return mergeFrom((boa.types.transportation.Individual.Person)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boa.types.transportation.Individual.Person other) {
        if (other == boa.types.transportation.Individual.Person.getDefaultInstance()) return this;
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasSTCASE()) {
          setSTCASE(other.getSTCASE());
        }
        if (other.hasVEFORMS()) {
          setVEFORMS(other.getVEFORMS());
        }
        if (other.hasVEHNO()) {
          setVEHNO(other.getVEHNO());
        }
        if (other.hasPERNO()) {
          setPERNO(other.getPERNO());
        }
        if (other.hasSTRVEH()) {
          setSTRVEH(other.getSTRVEH());
        }
        if (other.hasCOUNTY()) {
          setCOUNTY(other.getCOUNTY());
        }
        if (other.hasDAY()) {
          setDAY(other.getDAY());
        }
        if (other.hasMONTH()) {
          setMONTH(other.getMONTH());
        }
        if (other.hasHOUR()) {
          setHOUR(other.getHOUR());
        }
        if (other.hasMINUTE()) {
          setMINUTE(other.getMINUTE());
        }
        if (other.hasRURURB()) {
          setRURURB(other.getRURURB());
        }
        if (other.hasFUNCSYS()) {
          setFUNCSYS(other.getFUNCSYS());
        }
        if (other.hasHARMEV()) {
          setHARMEV(other.getHARMEV());
        }
        if (other.hasMANCOLL()) {
          setMANCOLL(other.getMANCOLL());
        }
        if (other.hasSCHBUS()) {
          setSCHBUS(other.getSCHBUS());
        }
        if (other.hasMAKE()) {
          setMAKE(other.getMAKE());
        }
        if (other.hasMAKMOD()) {
          setMAKMOD(other.getMAKMOD());
        }
        if (other.hasBODYTYP()) {
          setBODYTYP(other.getBODYTYP());
        }
        if (other.hasMODYEAR()) {
          setMODYEAR(other.getMODYEAR());
        }
        if (other.hasTOWVEH()) {
          setTOWVEH(other.getTOWVEH());
        }
        if (other.hasSPECUSE()) {
          setSPECUSE(other.getSPECUSE());
        }
        if (other.hasEMERUSE()) {
          setEMERUSE(other.getEMERUSE());
        }
        if (other.hasROLLOVER()) {
          setROLLOVER(other.getROLLOVER());
        }
        if (other.hasIMPACT1()) {
          setIMPACT1(other.getIMPACT1());
        }
        if (other.hasFIREEXP()) {
          setFIREEXP(other.getFIREEXP());
        }
        if (other.hasAGE()) {
          setAGE(other.getAGE());
        }
        if (other.hasSEX()) {
          setSEX(other.getSEX());
        }
        if (other.hasPERTYP()) {
          setPERTYP(other.getPERTYP());
        }
        if (other.hasINJSEV()) {
          setINJSEV(other.getINJSEV());
        }
        if (other.hasSEATPOS()) {
          setSEATPOS(other.getSEATPOS());
        }
        if (other.hasRESTUSE()) {
          setRESTUSE(other.getRESTUSE());
        }
        if (other.hasRESTMIS()) {
          setRESTMIS(other.getRESTMIS());
        }
        if (other.hasAIRBAG()) {
          setAIRBAG(other.getAIRBAG());
        }
        if (other.hasEJECTION()) {
          setEJECTION(other.getEJECTION());
        }
        if (other.hasEJPATH()) {
          setEJPATH(other.getEJPATH());
        }
        if (other.hasEXTRICAT()) {
          setEXTRICAT(other.getEXTRICAT());
        }
        if (other.hasDRINKING()) {
          setDRINKING(other.getDRINKING());
        }
        if (other.hasALCDET()) {
          setALCDET(other.getALCDET());
        }
        if (other.hasALCSTATUS()) {
          setALCSTATUS(other.getALCSTATUS());
        }
        if (other.hasATSTTYP()) {
          setATSTTYP(other.getATSTTYP());
        }
        if (other.hasALCRES()) {
          setALCRES(other.getALCRES());
        }
        if (other.hasDRUGS()) {
          setDRUGS(other.getDRUGS());
        }
        if (other.hasDRUGDET()) {
          setDRUGDET(other.getDRUGDET());
        }
        if (other.hasDSTATUS()) {
          setDSTATUS(other.getDSTATUS());
        }
        if (other.hasDRUGTST1()) {
          setDRUGTST1(other.getDRUGTST1());
        }
        if (other.hasDRUGTST2()) {
          setDRUGTST2(other.getDRUGTST2());
        }
        if (other.hasDRUGTST3()) {
          setDRUGTST3(other.getDRUGTST3());
        }
        if (other.hasDRUGRES1()) {
          setDRUGRES1(other.getDRUGRES1());
        }
        if (other.hasDRUGRES2()) {
          setDRUGRES2(other.getDRUGRES2());
        }
        if (other.hasDRUGRES3()) {
          setDRUGRES3(other.getDRUGRES3());
        }
        if (other.hasHOSPITAL()) {
          setHOSPITAL(other.getHOSPITAL());
        }
        if (other.hasDOA()) {
          setDOA(other.getDOA());
        }
        if (other.hasDEATHDA()) {
          setDEATHDA(other.getDEATHDA());
        }
        if (other.hasDEATHMO()) {
          setDEATHMO(other.getDEATHMO());
        }
        if (other.hasDEATHYR()) {
          setDEATHYR(other.getDEATHYR());
        }
        if (other.hasDEATHHR()) {
          setDEATHHR(other.getDEATHHR());
        }
        if (other.hasDEATHMN()) {
          setDEATHMN(other.getDEATHMN());
        }
        if (other.hasDEATHTM()) {
          setDEATHTM(other.getDEATHTM());
        }
        if (other.hasLAGHRS()) {
          setLAGHRS(other.getLAGHRS());
        }
        if (other.hasLAGMINS()) {
          setLAGMINS(other.getLAGMINS());
        }
        if (other.hasPSF1()) {
          setPSF1(other.getPSF1());
        }
        if (other.hasPSF2()) {
          setPSF2(other.getPSF2());
        }
        if (other.hasPSF3()) {
          setPSF3(other.getPSF3());
        }
        if (other.hasWORKINJ()) {
          setWORKINJ(other.getWORKINJ());
        }
        if (other.hasHISPANIC()) {
          setHISPANIC(other.getHISPANIC());
        }
        if (other.hasRACE()) {
          setRACE(other.getRACE());
        }
        if (other.hasLOCATION()) {
          setLOCATION(other.getLOCATION());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasState()) {
          
          return false;
        }
        if (!hasSTCASE()) {
          
          return false;
        }
        if (!hasVEFORMS()) {
          
          return false;
        }
        if (!hasVEHNO()) {
          
          return false;
        }
        if (!hasPERNO()) {
          
          return false;
        }
        if (!hasSTRVEH()) {
          
          return false;
        }
        if (!hasCOUNTY()) {
          
          return false;
        }
        if (!hasDAY()) {
          
          return false;
        }
        if (!hasMONTH()) {
          
          return false;
        }
        if (!hasHOUR()) {
          
          return false;
        }
        if (!hasMINUTE()) {
          
          return false;
        }
        if (!hasRURURB()) {
          
          return false;
        }
        if (!hasFUNCSYS()) {
          
          return false;
        }
        if (!hasHARMEV()) {
          
          return false;
        }
        if (!hasMANCOLL()) {
          
          return false;
        }
        if (!hasSCHBUS()) {
          
          return false;
        }
        if (!hasMAKE()) {
          
          return false;
        }
        if (!hasMAKMOD()) {
          
          return false;
        }
        if (!hasBODYTYP()) {
          
          return false;
        }
        if (!hasMODYEAR()) {
          
          return false;
        }
        if (!hasTOWVEH()) {
          
          return false;
        }
        if (!hasSPECUSE()) {
          
          return false;
        }
        if (!hasEMERUSE()) {
          
          return false;
        }
        if (!hasROLLOVER()) {
          
          return false;
        }
        if (!hasIMPACT1()) {
          
          return false;
        }
        if (!hasFIREEXP()) {
          
          return false;
        }
        if (!hasAGE()) {
          
          return false;
        }
        if (!hasSEX()) {
          
          return false;
        }
        if (!hasPERTYP()) {
          
          return false;
        }
        if (!hasINJSEV()) {
          
          return false;
        }
        if (!hasSEATPOS()) {
          
          return false;
        }
        if (!hasRESTUSE()) {
          
          return false;
        }
        if (!hasRESTMIS()) {
          
          return false;
        }
        if (!hasAIRBAG()) {
          
          return false;
        }
        if (!hasEJECTION()) {
          
          return false;
        }
        if (!hasEJPATH()) {
          
          return false;
        }
        if (!hasEXTRICAT()) {
          
          return false;
        }
        if (!hasDRINKING()) {
          
          return false;
        }
        if (!hasALCDET()) {
          
          return false;
        }
        if (!hasALCSTATUS()) {
          
          return false;
        }
        if (!hasATSTTYP()) {
          
          return false;
        }
        if (!hasALCRES()) {
          
          return false;
        }
        if (!hasDRUGS()) {
          
          return false;
        }
        if (!hasDRUGDET()) {
          
          return false;
        }
        if (!hasDSTATUS()) {
          
          return false;
        }
        if (!hasHOSPITAL()) {
          
          return false;
        }
        if (!hasDOA()) {
          
          return false;
        }
        if (!hasDEATHDA()) {
          
          return false;
        }
        if (!hasDEATHMO()) {
          
          return false;
        }
        if (!hasDEATHYR()) {
          
          return false;
        }
        if (!hasDEATHHR()) {
          
          return false;
        }
        if (!hasDEATHMN()) {
          
          return false;
        }
        if (!hasDEATHTM()) {
          
          return false;
        }
        if (!hasLAGHRS()) {
          
          return false;
        }
        if (!hasLAGMINS()) {
          
          return false;
        }
        if (!hasPSF1()) {
          
          return false;
        }
        if (!hasWORKINJ()) {
          
          return false;
        }
        if (!hasHISPANIC()) {
          
          return false;
        }
        if (!hasRACE()) {
          
          return false;
        }
        if (!hasLOCATION()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boa.types.transportation.Individual.Person parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boa.types.transportation.Individual.Person) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;

      // required .boa.types.transportation.STATE state = 1;
      private boa.types.transportation.State.STATE state_ = boa.types.transportation.State.STATE.Alabama;
      /**
       * <code>required .boa.types.transportation.STATE state = 1;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boa.types.transportation.STATE state = 1;</code>
       */
      public boa.types.transportation.State.STATE getState() {
        return state_;
      }
      /**
       * <code>required .boa.types.transportation.STATE state = 1;</code>
       */
      public Builder setState(boa.types.transportation.State.STATE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .boa.types.transportation.STATE state = 1;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = boa.types.transportation.State.STATE.Alabama;
        onChanged();
        return this;
      }

      // required float ST_CASE = 2;
      private float sTCASE_ ;
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public boolean hasSTCASE() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public float getSTCASE() {
        return sTCASE_;
      }
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public Builder setSTCASE(float value) {
        bitField0_ |= 0x00000002;
        sTCASE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ST_CASE = 2;</code>
       */
      public Builder clearSTCASE() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sTCASE_ = 0F;
        onChanged();
        return this;
      }

      // required float VE_FORMS = 3;
      private float vEFORMS_ ;
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public boolean hasVEFORMS() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public float getVEFORMS() {
        return vEFORMS_;
      }
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public Builder setVEFORMS(float value) {
        bitField0_ |= 0x00000004;
        vEFORMS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float VE_FORMS = 3;</code>
       */
      public Builder clearVEFORMS() {
        bitField0_ = (bitField0_ & ~0x00000004);
        vEFORMS_ = 0F;
        onChanged();
        return this;
      }

      // required float VEH_NO = 4;
      private float vEHNO_ ;
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public boolean hasVEHNO() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public float getVEHNO() {
        return vEHNO_;
      }
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public Builder setVEHNO(float value) {
        bitField0_ |= 0x00000008;
        vEHNO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float VEH_NO = 4;</code>
       */
      public Builder clearVEHNO() {
        bitField0_ = (bitField0_ & ~0x00000008);
        vEHNO_ = 0F;
        onChanged();
        return this;
      }

      // required float PER_NO = 5;
      private float pERNO_ ;
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public boolean hasPERNO() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public float getPERNO() {
        return pERNO_;
      }
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public Builder setPERNO(float value) {
        bitField0_ |= 0x00000010;
        pERNO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float PER_NO = 5;</code>
       */
      public Builder clearPERNO() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pERNO_ = 0F;
        onChanged();
        return this;
      }

      // required float STR_VEH = 6;
      private float sTRVEH_ ;
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public boolean hasSTRVEH() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public float getSTRVEH() {
        return sTRVEH_;
      }
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public Builder setSTRVEH(float value) {
        bitField0_ |= 0x00000020;
        sTRVEH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float STR_VEH = 6;</code>
       */
      public Builder clearSTRVEH() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sTRVEH_ = 0F;
        onChanged();
        return this;
      }

      // required float COUNTY = 7;
      private float cOUNTY_ ;
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public boolean hasCOUNTY() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public float getCOUNTY() {
        return cOUNTY_;
      }
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public Builder setCOUNTY(float value) {
        bitField0_ |= 0x00000040;
        cOUNTY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float COUNTY = 7;</code>
       */
      public Builder clearCOUNTY() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cOUNTY_ = 0F;
        onChanged();
        return this;
      }

      // required float DAY = 8;
      private float dAY_ ;
      /**
       * <code>required float DAY = 8;</code>
       */
      public boolean hasDAY() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float DAY = 8;</code>
       */
      public float getDAY() {
        return dAY_;
      }
      /**
       * <code>required float DAY = 8;</code>
       */
      public Builder setDAY(float value) {
        bitField0_ |= 0x00000080;
        dAY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DAY = 8;</code>
       */
      public Builder clearDAY() {
        bitField0_ = (bitField0_ & ~0x00000080);
        dAY_ = 0F;
        onChanged();
        return this;
      }

      // required float MONTH = 9;
      private float mONTH_ ;
      /**
       * <code>required float MONTH = 9;</code>
       */
      public boolean hasMONTH() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float MONTH = 9;</code>
       */
      public float getMONTH() {
        return mONTH_;
      }
      /**
       * <code>required float MONTH = 9;</code>
       */
      public Builder setMONTH(float value) {
        bitField0_ |= 0x00000100;
        mONTH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MONTH = 9;</code>
       */
      public Builder clearMONTH() {
        bitField0_ = (bitField0_ & ~0x00000100);
        mONTH_ = 0F;
        onChanged();
        return this;
      }

      // required float HOUR = 10;
      private float hOUR_ ;
      /**
       * <code>required float HOUR = 10;</code>
       */
      public boolean hasHOUR() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required float HOUR = 10;</code>
       */
      public float getHOUR() {
        return hOUR_;
      }
      /**
       * <code>required float HOUR = 10;</code>
       */
      public Builder setHOUR(float value) {
        bitField0_ |= 0x00000200;
        hOUR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HOUR = 10;</code>
       */
      public Builder clearHOUR() {
        bitField0_ = (bitField0_ & ~0x00000200);
        hOUR_ = 0F;
        onChanged();
        return this;
      }

      // required float MINUTE = 11;
      private float mINUTE_ ;
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public boolean hasMINUTE() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public float getMINUTE() {
        return mINUTE_;
      }
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public Builder setMINUTE(float value) {
        bitField0_ |= 0x00000400;
        mINUTE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MINUTE = 11;</code>
       */
      public Builder clearMINUTE() {
        bitField0_ = (bitField0_ & ~0x00000400);
        mINUTE_ = 0F;
        onChanged();
        return this;
      }

      // required float RUR_URB = 12;
      private float rURURB_ ;
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public boolean hasRURURB() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public float getRURURB() {
        return rURURB_;
      }
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public Builder setRURURB(float value) {
        bitField0_ |= 0x00000800;
        rURURB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float RUR_URB = 12;</code>
       */
      public Builder clearRURURB() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rURURB_ = 0F;
        onChanged();
        return this;
      }

      // required float FUNC_SYS = 13;
      private float fUNCSYS_ ;
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public boolean hasFUNCSYS() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public float getFUNCSYS() {
        return fUNCSYS_;
      }
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public Builder setFUNCSYS(float value) {
        bitField0_ |= 0x00001000;
        fUNCSYS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float FUNC_SYS = 13;</code>
       */
      public Builder clearFUNCSYS() {
        bitField0_ = (bitField0_ & ~0x00001000);
        fUNCSYS_ = 0F;
        onChanged();
        return this;
      }

      // required float HARM_EV = 14;
      private float hARMEV_ ;
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public boolean hasHARMEV() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public float getHARMEV() {
        return hARMEV_;
      }
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public Builder setHARMEV(float value) {
        bitField0_ |= 0x00002000;
        hARMEV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HARM_EV = 14;</code>
       */
      public Builder clearHARMEV() {
        bitField0_ = (bitField0_ & ~0x00002000);
        hARMEV_ = 0F;
        onChanged();
        return this;
      }

      // required float MAN_COLL = 15;
      private float mANCOLL_ ;
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public boolean hasMANCOLL() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public float getMANCOLL() {
        return mANCOLL_;
      }
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public Builder setMANCOLL(float value) {
        bitField0_ |= 0x00004000;
        mANCOLL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MAN_COLL = 15;</code>
       */
      public Builder clearMANCOLL() {
        bitField0_ = (bitField0_ & ~0x00004000);
        mANCOLL_ = 0F;
        onChanged();
        return this;
      }

      // required float SCH_BUS = 16;
      private float sCHBUS_ ;
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public boolean hasSCHBUS() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public float getSCHBUS() {
        return sCHBUS_;
      }
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public Builder setSCHBUS(float value) {
        bitField0_ |= 0x00008000;
        sCHBUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SCH_BUS = 16;</code>
       */
      public Builder clearSCHBUS() {
        bitField0_ = (bitField0_ & ~0x00008000);
        sCHBUS_ = 0F;
        onChanged();
        return this;
      }

      // required float MAKE = 17;
      private float mAKE_ ;
      /**
       * <code>required float MAKE = 17;</code>
       */
      public boolean hasMAKE() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>required float MAKE = 17;</code>
       */
      public float getMAKE() {
        return mAKE_;
      }
      /**
       * <code>required float MAKE = 17;</code>
       */
      public Builder setMAKE(float value) {
        bitField0_ |= 0x00010000;
        mAKE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MAKE = 17;</code>
       */
      public Builder clearMAKE() {
        bitField0_ = (bitField0_ & ~0x00010000);
        mAKE_ = 0F;
        onChanged();
        return this;
      }

      // required float MAK_MOD = 18;
      private float mAKMOD_ ;
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public boolean hasMAKMOD() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public float getMAKMOD() {
        return mAKMOD_;
      }
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public Builder setMAKMOD(float value) {
        bitField0_ |= 0x00020000;
        mAKMOD_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MAK_MOD = 18;</code>
       */
      public Builder clearMAKMOD() {
        bitField0_ = (bitField0_ & ~0x00020000);
        mAKMOD_ = 0F;
        onChanged();
        return this;
      }

      // required float BODY_TYP = 19;
      private float bODYTYP_ ;
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public boolean hasBODYTYP() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public float getBODYTYP() {
        return bODYTYP_;
      }
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public Builder setBODYTYP(float value) {
        bitField0_ |= 0x00040000;
        bODYTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float BODY_TYP = 19;</code>
       */
      public Builder clearBODYTYP() {
        bitField0_ = (bitField0_ & ~0x00040000);
        bODYTYP_ = 0F;
        onChanged();
        return this;
      }

      // required float MOD_YEAR = 20;
      private float mODYEAR_ ;
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public boolean hasMODYEAR() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public float getMODYEAR() {
        return mODYEAR_;
      }
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public Builder setMODYEAR(float value) {
        bitField0_ |= 0x00080000;
        mODYEAR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float MOD_YEAR = 20;</code>
       */
      public Builder clearMODYEAR() {
        bitField0_ = (bitField0_ & ~0x00080000);
        mODYEAR_ = 0F;
        onChanged();
        return this;
      }

      // required float TOW_VEH = 21;
      private float tOWVEH_ ;
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public boolean hasTOWVEH() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public float getTOWVEH() {
        return tOWVEH_;
      }
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public Builder setTOWVEH(float value) {
        bitField0_ |= 0x00100000;
        tOWVEH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float TOW_VEH = 21;</code>
       */
      public Builder clearTOWVEH() {
        bitField0_ = (bitField0_ & ~0x00100000);
        tOWVEH_ = 0F;
        onChanged();
        return this;
      }

      // required float SPEC_USE = 22;
      private float sPECUSE_ ;
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public boolean hasSPECUSE() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public float getSPECUSE() {
        return sPECUSE_;
      }
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public Builder setSPECUSE(float value) {
        bitField0_ |= 0x00200000;
        sPECUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SPEC_USE = 22;</code>
       */
      public Builder clearSPECUSE() {
        bitField0_ = (bitField0_ & ~0x00200000);
        sPECUSE_ = 0F;
        onChanged();
        return this;
      }

      // required float EMER_USE = 23;
      private float eMERUSE_ ;
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public boolean hasEMERUSE() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public float getEMERUSE() {
        return eMERUSE_;
      }
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public Builder setEMERUSE(float value) {
        bitField0_ |= 0x00400000;
        eMERUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EMER_USE = 23;</code>
       */
      public Builder clearEMERUSE() {
        bitField0_ = (bitField0_ & ~0x00400000);
        eMERUSE_ = 0F;
        onChanged();
        return this;
      }

      // required float ROLLOVER = 24;
      private float rOLLOVER_ ;
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public boolean hasROLLOVER() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public float getROLLOVER() {
        return rOLLOVER_;
      }
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public Builder setROLLOVER(float value) {
        bitField0_ |= 0x00800000;
        rOLLOVER_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ROLLOVER = 24;</code>
       */
      public Builder clearROLLOVER() {
        bitField0_ = (bitField0_ & ~0x00800000);
        rOLLOVER_ = 0F;
        onChanged();
        return this;
      }

      // required float IMPACT1 = 25;
      private float iMPACT1_ ;
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public boolean hasIMPACT1() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public float getIMPACT1() {
        return iMPACT1_;
      }
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public Builder setIMPACT1(float value) {
        bitField0_ |= 0x01000000;
        iMPACT1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float IMPACT1 = 25;</code>
       */
      public Builder clearIMPACT1() {
        bitField0_ = (bitField0_ & ~0x01000000);
        iMPACT1_ = 0F;
        onChanged();
        return this;
      }

      // required float FIRE_EXP = 26;
      private float fIREEXP_ ;
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public boolean hasFIREEXP() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public float getFIREEXP() {
        return fIREEXP_;
      }
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public Builder setFIREEXP(float value) {
        bitField0_ |= 0x02000000;
        fIREEXP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float FIRE_EXP = 26;</code>
       */
      public Builder clearFIREEXP() {
        bitField0_ = (bitField0_ & ~0x02000000);
        fIREEXP_ = 0F;
        onChanged();
        return this;
      }

      // required float AGE = 27;
      private float aGE_ ;
      /**
       * <code>required float AGE = 27;</code>
       */
      public boolean hasAGE() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required float AGE = 27;</code>
       */
      public float getAGE() {
        return aGE_;
      }
      /**
       * <code>required float AGE = 27;</code>
       */
      public Builder setAGE(float value) {
        bitField0_ |= 0x04000000;
        aGE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float AGE = 27;</code>
       */
      public Builder clearAGE() {
        bitField0_ = (bitField0_ & ~0x04000000);
        aGE_ = 0F;
        onChanged();
        return this;
      }

      // required float SEX = 28;
      private float sEX_ ;
      /**
       * <code>required float SEX = 28;</code>
       */
      public boolean hasSEX() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required float SEX = 28;</code>
       */
      public float getSEX() {
        return sEX_;
      }
      /**
       * <code>required float SEX = 28;</code>
       */
      public Builder setSEX(float value) {
        bitField0_ |= 0x08000000;
        sEX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SEX = 28;</code>
       */
      public Builder clearSEX() {
        bitField0_ = (bitField0_ & ~0x08000000);
        sEX_ = 0F;
        onChanged();
        return this;
      }

      // required float PER_TYP = 29;
      private float pERTYP_ ;
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public boolean hasPERTYP() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public float getPERTYP() {
        return pERTYP_;
      }
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public Builder setPERTYP(float value) {
        bitField0_ |= 0x10000000;
        pERTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float PER_TYP = 29;</code>
       */
      public Builder clearPERTYP() {
        bitField0_ = (bitField0_ & ~0x10000000);
        pERTYP_ = 0F;
        onChanged();
        return this;
      }

      // required float INJ_SEV = 30;
      private float iNJSEV_ ;
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public boolean hasINJSEV() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public float getINJSEV() {
        return iNJSEV_;
      }
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public Builder setINJSEV(float value) {
        bitField0_ |= 0x20000000;
        iNJSEV_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float INJ_SEV = 30;</code>
       */
      public Builder clearINJSEV() {
        bitField0_ = (bitField0_ & ~0x20000000);
        iNJSEV_ = 0F;
        onChanged();
        return this;
      }

      // required float SEAT_POS = 31;
      private float sEATPOS_ ;
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public boolean hasSEATPOS() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public float getSEATPOS() {
        return sEATPOS_;
      }
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public Builder setSEATPOS(float value) {
        bitField0_ |= 0x40000000;
        sEATPOS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float SEAT_POS = 31;</code>
       */
      public Builder clearSEATPOS() {
        bitField0_ = (bitField0_ & ~0x40000000);
        sEATPOS_ = 0F;
        onChanged();
        return this;
      }

      // required float REST_USE = 32;
      private float rESTUSE_ ;
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public boolean hasRESTUSE() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public float getRESTUSE() {
        return rESTUSE_;
      }
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public Builder setRESTUSE(float value) {
        bitField0_ |= 0x80000000;
        rESTUSE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float REST_USE = 32;</code>
       */
      public Builder clearRESTUSE() {
        bitField0_ = (bitField0_ & ~0x80000000);
        rESTUSE_ = 0F;
        onChanged();
        return this;
      }

      // required float REST_MIS = 33;
      private float rESTMIS_ ;
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public boolean hasRESTMIS() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public float getRESTMIS() {
        return rESTMIS_;
      }
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public Builder setRESTMIS(float value) {
        bitField1_ |= 0x00000001;
        rESTMIS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float REST_MIS = 33;</code>
       */
      public Builder clearRESTMIS() {
        bitField1_ = (bitField1_ & ~0x00000001);
        rESTMIS_ = 0F;
        onChanged();
        return this;
      }

      // required float AIR_BAG = 34;
      private float aIRBAG_ ;
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public boolean hasAIRBAG() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public float getAIRBAG() {
        return aIRBAG_;
      }
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public Builder setAIRBAG(float value) {
        bitField1_ |= 0x00000002;
        aIRBAG_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float AIR_BAG = 34;</code>
       */
      public Builder clearAIRBAG() {
        bitField1_ = (bitField1_ & ~0x00000002);
        aIRBAG_ = 0F;
        onChanged();
        return this;
      }

      // required float EJECTION = 35;
      private float eJECTION_ ;
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public boolean hasEJECTION() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public float getEJECTION() {
        return eJECTION_;
      }
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public Builder setEJECTION(float value) {
        bitField1_ |= 0x00000004;
        eJECTION_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EJECTION = 35;</code>
       */
      public Builder clearEJECTION() {
        bitField1_ = (bitField1_ & ~0x00000004);
        eJECTION_ = 0F;
        onChanged();
        return this;
      }

      // required float EJ_PATH = 36;
      private float eJPATH_ ;
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public boolean hasEJPATH() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public float getEJPATH() {
        return eJPATH_;
      }
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public Builder setEJPATH(float value) {
        bitField1_ |= 0x00000008;
        eJPATH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EJ_PATH = 36;</code>
       */
      public Builder clearEJPATH() {
        bitField1_ = (bitField1_ & ~0x00000008);
        eJPATH_ = 0F;
        onChanged();
        return this;
      }

      // required float EXTRICAT = 37;
      private float eXTRICAT_ ;
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public boolean hasEXTRICAT() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public float getEXTRICAT() {
        return eXTRICAT_;
      }
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public Builder setEXTRICAT(float value) {
        bitField1_ |= 0x00000010;
        eXTRICAT_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float EXTRICAT = 37;</code>
       */
      public Builder clearEXTRICAT() {
        bitField1_ = (bitField1_ & ~0x00000010);
        eXTRICAT_ = 0F;
        onChanged();
        return this;
      }

      // required float DRINKING = 38;
      private float dRINKING_ ;
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public boolean hasDRINKING() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public float getDRINKING() {
        return dRINKING_;
      }
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public Builder setDRINKING(float value) {
        bitField1_ |= 0x00000020;
        dRINKING_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DRINKING = 38;</code>
       */
      public Builder clearDRINKING() {
        bitField1_ = (bitField1_ & ~0x00000020);
        dRINKING_ = 0F;
        onChanged();
        return this;
      }

      // required float ALC_DET = 39;
      private float aLCDET_ ;
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public boolean hasALCDET() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public float getALCDET() {
        return aLCDET_;
      }
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public Builder setALCDET(float value) {
        bitField1_ |= 0x00000040;
        aLCDET_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ALC_DET = 39;</code>
       */
      public Builder clearALCDET() {
        bitField1_ = (bitField1_ & ~0x00000040);
        aLCDET_ = 0F;
        onChanged();
        return this;
      }

      // required float ALC_STATUS = 40;
      private float aLCSTATUS_ ;
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public boolean hasALCSTATUS() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public float getALCSTATUS() {
        return aLCSTATUS_;
      }
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public Builder setALCSTATUS(float value) {
        bitField1_ |= 0x00000080;
        aLCSTATUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ALC_STATUS = 40;</code>
       */
      public Builder clearALCSTATUS() {
        bitField1_ = (bitField1_ & ~0x00000080);
        aLCSTATUS_ = 0F;
        onChanged();
        return this;
      }

      // required float ATST_TYP = 41;
      private float aTSTTYP_ ;
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public boolean hasATSTTYP() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public float getATSTTYP() {
        return aTSTTYP_;
      }
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public Builder setATSTTYP(float value) {
        bitField1_ |= 0x00000100;
        aTSTTYP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ATST_TYP = 41;</code>
       */
      public Builder clearATSTTYP() {
        bitField1_ = (bitField1_ & ~0x00000100);
        aTSTTYP_ = 0F;
        onChanged();
        return this;
      }

      // required float ALC_RES = 42;
      private float aLCRES_ ;
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public boolean hasALCRES() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public float getALCRES() {
        return aLCRES_;
      }
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public Builder setALCRES(float value) {
        bitField1_ |= 0x00000200;
        aLCRES_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float ALC_RES = 42;</code>
       */
      public Builder clearALCRES() {
        bitField1_ = (bitField1_ & ~0x00000200);
        aLCRES_ = 0F;
        onChanged();
        return this;
      }

      // required float DRUGS = 43;
      private float dRUGS_ ;
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public boolean hasDRUGS() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public float getDRUGS() {
        return dRUGS_;
      }
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public Builder setDRUGS(float value) {
        bitField1_ |= 0x00000400;
        dRUGS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DRUGS = 43;</code>
       */
      public Builder clearDRUGS() {
        bitField1_ = (bitField1_ & ~0x00000400);
        dRUGS_ = 0F;
        onChanged();
        return this;
      }

      // required float DRUG_DET = 44;
      private float dRUGDET_ ;
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public boolean hasDRUGDET() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public float getDRUGDET() {
        return dRUGDET_;
      }
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public Builder setDRUGDET(float value) {
        bitField1_ |= 0x00000800;
        dRUGDET_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DRUG_DET = 44;</code>
       */
      public Builder clearDRUGDET() {
        bitField1_ = (bitField1_ & ~0x00000800);
        dRUGDET_ = 0F;
        onChanged();
        return this;
      }

      // required float DSTATUS = 45;
      private float dSTATUS_ ;
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public boolean hasDSTATUS() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public float getDSTATUS() {
        return dSTATUS_;
      }
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public Builder setDSTATUS(float value) {
        bitField1_ |= 0x00001000;
        dSTATUS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DSTATUS = 45;</code>
       */
      public Builder clearDSTATUS() {
        bitField1_ = (bitField1_ & ~0x00001000);
        dSTATUS_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGTST1 = 46;
      private float dRUGTST1_ ;
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public boolean hasDRUGTST1() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public float getDRUGTST1() {
        return dRUGTST1_;
      }
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public Builder setDRUGTST1(float value) {
        bitField1_ |= 0x00002000;
        dRUGTST1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGTST1 = 46;</code>
       */
      public Builder clearDRUGTST1() {
        bitField1_ = (bitField1_ & ~0x00002000);
        dRUGTST1_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGTST2 = 47;
      private float dRUGTST2_ ;
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public boolean hasDRUGTST2() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public float getDRUGTST2() {
        return dRUGTST2_;
      }
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public Builder setDRUGTST2(float value) {
        bitField1_ |= 0x00004000;
        dRUGTST2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGTST2 = 47;</code>
       */
      public Builder clearDRUGTST2() {
        bitField1_ = (bitField1_ & ~0x00004000);
        dRUGTST2_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGTST3 = 48;
      private float dRUGTST3_ ;
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public boolean hasDRUGTST3() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public float getDRUGTST3() {
        return dRUGTST3_;
      }
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public Builder setDRUGTST3(float value) {
        bitField1_ |= 0x00008000;
        dRUGTST3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGTST3 = 48;</code>
       */
      public Builder clearDRUGTST3() {
        bitField1_ = (bitField1_ & ~0x00008000);
        dRUGTST3_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGRES1 = 49;
      private float dRUGRES1_ ;
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public boolean hasDRUGRES1() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public float getDRUGRES1() {
        return dRUGRES1_;
      }
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public Builder setDRUGRES1(float value) {
        bitField1_ |= 0x00010000;
        dRUGRES1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGRES1 = 49;</code>
       */
      public Builder clearDRUGRES1() {
        bitField1_ = (bitField1_ & ~0x00010000);
        dRUGRES1_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGRES2 = 50;
      private float dRUGRES2_ ;
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public boolean hasDRUGRES2() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public float getDRUGRES2() {
        return dRUGRES2_;
      }
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public Builder setDRUGRES2(float value) {
        bitField1_ |= 0x00020000;
        dRUGRES2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGRES2 = 50;</code>
       */
      public Builder clearDRUGRES2() {
        bitField1_ = (bitField1_ & ~0x00020000);
        dRUGRES2_ = 0F;
        onChanged();
        return this;
      }

      // optional float DRUGRES3 = 51;
      private float dRUGRES3_ ;
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public boolean hasDRUGRES3() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public float getDRUGRES3() {
        return dRUGRES3_;
      }
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public Builder setDRUGRES3(float value) {
        bitField1_ |= 0x00040000;
        dRUGRES3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float DRUGRES3 = 51;</code>
       */
      public Builder clearDRUGRES3() {
        bitField1_ = (bitField1_ & ~0x00040000);
        dRUGRES3_ = 0F;
        onChanged();
        return this;
      }

      // required float HOSPITAL = 52;
      private float hOSPITAL_ ;
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public boolean hasHOSPITAL() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public float getHOSPITAL() {
        return hOSPITAL_;
      }
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public Builder setHOSPITAL(float value) {
        bitField1_ |= 0x00080000;
        hOSPITAL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HOSPITAL = 52;</code>
       */
      public Builder clearHOSPITAL() {
        bitField1_ = (bitField1_ & ~0x00080000);
        hOSPITAL_ = 0F;
        onChanged();
        return this;
      }

      // required float DOA = 53;
      private float dOA_ ;
      /**
       * <code>required float DOA = 53;</code>
       */
      public boolean hasDOA() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>required float DOA = 53;</code>
       */
      public float getDOA() {
        return dOA_;
      }
      /**
       * <code>required float DOA = 53;</code>
       */
      public Builder setDOA(float value) {
        bitField1_ |= 0x00100000;
        dOA_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DOA = 53;</code>
       */
      public Builder clearDOA() {
        bitField1_ = (bitField1_ & ~0x00100000);
        dOA_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_DA = 54;
      private float dEATHDA_ ;
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public boolean hasDEATHDA() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public float getDEATHDA() {
        return dEATHDA_;
      }
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public Builder setDEATHDA(float value) {
        bitField1_ |= 0x00200000;
        dEATHDA_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_DA = 54;</code>
       */
      public Builder clearDEATHDA() {
        bitField1_ = (bitField1_ & ~0x00200000);
        dEATHDA_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_MO = 55;
      private float dEATHMO_ ;
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public boolean hasDEATHMO() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public float getDEATHMO() {
        return dEATHMO_;
      }
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public Builder setDEATHMO(float value) {
        bitField1_ |= 0x00400000;
        dEATHMO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_MO = 55;</code>
       */
      public Builder clearDEATHMO() {
        bitField1_ = (bitField1_ & ~0x00400000);
        dEATHMO_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_YR = 56;
      private float dEATHYR_ ;
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public boolean hasDEATHYR() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public float getDEATHYR() {
        return dEATHYR_;
      }
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public Builder setDEATHYR(float value) {
        bitField1_ |= 0x00800000;
        dEATHYR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_YR = 56;</code>
       */
      public Builder clearDEATHYR() {
        bitField1_ = (bitField1_ & ~0x00800000);
        dEATHYR_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_HR = 57;
      private float dEATHHR_ ;
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public boolean hasDEATHHR() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public float getDEATHHR() {
        return dEATHHR_;
      }
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public Builder setDEATHHR(float value) {
        bitField1_ |= 0x01000000;
        dEATHHR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_HR = 57;</code>
       */
      public Builder clearDEATHHR() {
        bitField1_ = (bitField1_ & ~0x01000000);
        dEATHHR_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_MN = 58;
      private float dEATHMN_ ;
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public boolean hasDEATHMN() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public float getDEATHMN() {
        return dEATHMN_;
      }
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public Builder setDEATHMN(float value) {
        bitField1_ |= 0x02000000;
        dEATHMN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_MN = 58;</code>
       */
      public Builder clearDEATHMN() {
        bitField1_ = (bitField1_ & ~0x02000000);
        dEATHMN_ = 0F;
        onChanged();
        return this;
      }

      // required float DEATH_TM = 59;
      private float dEATHTM_ ;
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public boolean hasDEATHTM() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public float getDEATHTM() {
        return dEATHTM_;
      }
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public Builder setDEATHTM(float value) {
        bitField1_ |= 0x04000000;
        dEATHTM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float DEATH_TM = 59;</code>
       */
      public Builder clearDEATHTM() {
        bitField1_ = (bitField1_ & ~0x04000000);
        dEATHTM_ = 0F;
        onChanged();
        return this;
      }

      // required float LAG_HRS = 60;
      private float lAGHRS_ ;
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public boolean hasLAGHRS() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public float getLAGHRS() {
        return lAGHRS_;
      }
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public Builder setLAGHRS(float value) {
        bitField1_ |= 0x08000000;
        lAGHRS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float LAG_HRS = 60;</code>
       */
      public Builder clearLAGHRS() {
        bitField1_ = (bitField1_ & ~0x08000000);
        lAGHRS_ = 0F;
        onChanged();
        return this;
      }

      // required float LAG_MINS = 61;
      private float lAGMINS_ ;
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public boolean hasLAGMINS() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public float getLAGMINS() {
        return lAGMINS_;
      }
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public Builder setLAGMINS(float value) {
        bitField1_ |= 0x10000000;
        lAGMINS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float LAG_MINS = 61;</code>
       */
      public Builder clearLAGMINS() {
        bitField1_ = (bitField1_ & ~0x10000000);
        lAGMINS_ = 0F;
        onChanged();
        return this;
      }

      // required float P_SF1 = 62;
      private float pSF1_ ;
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public boolean hasPSF1() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public float getPSF1() {
        return pSF1_;
      }
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public Builder setPSF1(float value) {
        bitField1_ |= 0x20000000;
        pSF1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float P_SF1 = 62;</code>
       */
      public Builder clearPSF1() {
        bitField1_ = (bitField1_ & ~0x20000000);
        pSF1_ = 0F;
        onChanged();
        return this;
      }

      // optional float P_SF2 = 63;
      private float pSF2_ ;
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public boolean hasPSF2() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public float getPSF2() {
        return pSF2_;
      }
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public Builder setPSF2(float value) {
        bitField1_ |= 0x40000000;
        pSF2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float P_SF2 = 63;</code>
       */
      public Builder clearPSF2() {
        bitField1_ = (bitField1_ & ~0x40000000);
        pSF2_ = 0F;
        onChanged();
        return this;
      }

      // optional float P_SF3 = 64;
      private float pSF3_ ;
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public boolean hasPSF3() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public float getPSF3() {
        return pSF3_;
      }
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public Builder setPSF3(float value) {
        bitField1_ |= 0x80000000;
        pSF3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float P_SF3 = 64;</code>
       */
      public Builder clearPSF3() {
        bitField1_ = (bitField1_ & ~0x80000000);
        pSF3_ = 0F;
        onChanged();
        return this;
      }

      // required float WORK_INJ = 65;
      private float wORKINJ_ ;
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public boolean hasWORKINJ() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public float getWORKINJ() {
        return wORKINJ_;
      }
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public Builder setWORKINJ(float value) {
        bitField2_ |= 0x00000001;
        wORKINJ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float WORK_INJ = 65;</code>
       */
      public Builder clearWORKINJ() {
        bitField2_ = (bitField2_ & ~0x00000001);
        wORKINJ_ = 0F;
        onChanged();
        return this;
      }

      // required float HISPANIC = 66;
      private float hISPANIC_ ;
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public boolean hasHISPANIC() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public float getHISPANIC() {
        return hISPANIC_;
      }
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public Builder setHISPANIC(float value) {
        bitField2_ |= 0x00000002;
        hISPANIC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float HISPANIC = 66;</code>
       */
      public Builder clearHISPANIC() {
        bitField2_ = (bitField2_ & ~0x00000002);
        hISPANIC_ = 0F;
        onChanged();
        return this;
      }

      // required float RACE = 67;
      private float rACE_ ;
      /**
       * <code>required float RACE = 67;</code>
       */
      public boolean hasRACE() {
        return ((bitField2_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float RACE = 67;</code>
       */
      public float getRACE() {
        return rACE_;
      }
      /**
       * <code>required float RACE = 67;</code>
       */
      public Builder setRACE(float value) {
        bitField2_ |= 0x00000004;
        rACE_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float RACE = 67;</code>
       */
      public Builder clearRACE() {
        bitField2_ = (bitField2_ & ~0x00000004);
        rACE_ = 0F;
        onChanged();
        return this;
      }

      // required float LOCATION = 68;
      private float lOCATION_ ;
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public boolean hasLOCATION() {
        return ((bitField2_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public float getLOCATION() {
        return lOCATION_;
      }
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public Builder setLOCATION(float value) {
        bitField2_ |= 0x00000008;
        lOCATION_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float LOCATION = 68;</code>
       */
      public Builder clearLOCATION() {
        bitField2_ = (bitField2_ & ~0x00000008);
        lOCATION_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boa.types.transportation.Person)
    }

    static {
      defaultInstance = new Person(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boa.types.transportation.Person)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boa_types_transportation_Person_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boa_types_transportation_Person_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020individual.proto\022\030boa.types.transporta" +
      "tion\032\013state.proto\"\251\t\n\006Person\022.\n\005state\030\001 " +
      "\002(\0162\037.boa.types.transportation.STATE\022\017\n\007" +
      "ST_CASE\030\002 \002(\002\022\020\n\010VE_FORMS\030\003 \002(\002\022\016\n\006VEH_N" +
      "O\030\004 \002(\002\022\016\n\006PER_NO\030\005 \002(\002\022\017\n\007STR_VEH\030\006 \002(\002" +
      "\022\016\n\006COUNTY\030\007 \002(\002\022\013\n\003DAY\030\010 \002(\002\022\r\n\005MONTH\030\t" +
      " \002(\002\022\014\n\004HOUR\030\n \002(\002\022\016\n\006MINUTE\030\013 \002(\002\022\017\n\007RU" +
      "R_URB\030\014 \002(\002\022\020\n\010FUNC_SYS\030\r \002(\002\022\017\n\007HARM_EV" +
      "\030\016 \002(\002\022\020\n\010MAN_COLL\030\017 \002(\002\022\017\n\007SCH_BUS\030\020 \002(" +
      "\002\022\014\n\004MAKE\030\021 \002(\002\022\017\n\007MAK_MOD\030\022 \002(\002\022\020\n\010BODY",
      "_TYP\030\023 \002(\002\022\020\n\010MOD_YEAR\030\024 \002(\002\022\017\n\007TOW_VEH\030" +
      "\025 \002(\002\022\020\n\010SPEC_USE\030\026 \002(\002\022\020\n\010EMER_USE\030\027 \002(" +
      "\002\022\020\n\010ROLLOVER\030\030 \002(\002\022\017\n\007IMPACT1\030\031 \002(\002\022\020\n\010" +
      "FIRE_EXP\030\032 \002(\002\022\013\n\003AGE\030\033 \002(\002\022\013\n\003SEX\030\034 \002(\002" +
      "\022\017\n\007PER_TYP\030\035 \002(\002\022\017\n\007INJ_SEV\030\036 \002(\002\022\020\n\010SE" +
      "AT_POS\030\037 \002(\002\022\020\n\010REST_USE\030  \002(\002\022\020\n\010REST_M" +
      "IS\030! \002(\002\022\017\n\007AIR_BAG\030\" \002(\002\022\020\n\010EJECTION\030# " +
      "\002(\002\022\017\n\007EJ_PATH\030$ \002(\002\022\020\n\010EXTRICAT\030% \002(\002\022\020" +
      "\n\010DRINKING\030& \002(\002\022\017\n\007ALC_DET\030\' \002(\002\022\022\n\nALC" +
      "_STATUS\030( \002(\002\022\020\n\010ATST_TYP\030) \002(\002\022\017\n\007ALC_R",
      "ES\030* \002(\002\022\r\n\005DRUGS\030+ \002(\002\022\020\n\010DRUG_DET\030, \002(" +
      "\002\022\017\n\007DSTATUS\030- \002(\002\022\020\n\010DRUGTST1\030. \001(\002\022\020\n\010" +
      "DRUGTST2\030/ \001(\002\022\020\n\010DRUGTST3\0300 \001(\002\022\020\n\010DRUG" +
      "RES1\0301 \001(\002\022\020\n\010DRUGRES2\0302 \001(\002\022\020\n\010DRUGRES3" +
      "\0303 \001(\002\022\020\n\010HOSPITAL\0304 \002(\002\022\013\n\003DOA\0305 \002(\002\022\020\n" +
      "\010DEATH_DA\0306 \002(\002\022\020\n\010DEATH_MO\0307 \002(\002\022\020\n\010DEA" +
      "TH_YR\0308 \002(\002\022\020\n\010DEATH_HR\0309 \002(\002\022\020\n\010DEATH_M" +
      "N\030: \002(\002\022\020\n\010DEATH_TM\030; \002(\002\022\017\n\007LAG_HRS\030< \002" +
      "(\002\022\020\n\010LAG_MINS\030= \002(\002\022\r\n\005P_SF1\030> \002(\002\022\r\n\005P" +
      "_SF2\030? \001(\002\022\r\n\005P_SF3\030@ \001(\002\022\020\n\010WORK_INJ\030A ",
      "\002(\002\022\020\n\010HISPANIC\030B \002(\002\022\014\n\004RACE\030C \002(\002\022\020\n\010L" +
      "OCATION\030D \002(\002B\002H\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_boa_types_transportation_Person_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_boa_types_transportation_Person_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boa_types_transportation_Person_descriptor,
              new java.lang.String[] { "State", "STCASE", "VEFORMS", "VEHNO", "PERNO", "STRVEH", "COUNTY", "DAY", "MONTH", "HOUR", "MINUTE", "RURURB", "FUNCSYS", "HARMEV", "MANCOLL", "SCHBUS", "MAKE", "MAKMOD", "BODYTYP", "MODYEAR", "TOWVEH", "SPECUSE", "EMERUSE", "ROLLOVER", "IMPACT1", "FIREEXP", "AGE", "SEX", "PERTYP", "INJSEV", "SEATPOS", "RESTUSE", "RESTMIS", "AIRBAG", "EJECTION", "EJPATH", "EXTRICAT", "DRINKING", "ALCDET", "ALCSTATUS", "ATSTTYP", "ALCRES", "DRUGS", "DRUGDET", "DSTATUS", "DRUGTST1", "DRUGTST2", "DRUGTST3", "DRUGRES1", "DRUGRES2", "DRUGRES3", "HOSPITAL", "DOA", "DEATHDA", "DEATHMO", "DEATHYR", "DEATHHR", "DEATHMN", "DEATHTM", "LAGHRS", "LAGMINS", "PSF1", "PSF2", "PSF3", "WORKINJ", "HISPANIC", "RACE", "LOCATION", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          boa.types.transportation.State.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
