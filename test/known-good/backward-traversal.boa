m: output collection[int] of string;
p: Project = input;

# program analysis output
type T_gen_kill= {gen: set of string, kill: string, dummy : int};
type T_inout= {in: set of string, out: set of string};

# cfg of the current method
cfg: CFG;

# traversal that gets all variable uses in a method
init := traversal(node: CFGNode): T_gen_kill {
	cur_value : T_gen_kill;
	cur_value = {node.useVariables, node.defVariables, 0};
	return cur_value;
};

# cfg live variable analysis
live := traversal(node: CFGNode): T_inout {
	succs := node.successors;
	in_set : set of string;
	out_set : set of string;
	cur_val : T_inout;
	cur_val = {in_set, out_set};
	if(def(getValue(node))) {
		cur_val = getValue(node);
	}
	foreach(i : int; def(succs[i])) {
		succ := getValue(succs[i]);
		if(def(succ)) {
			cur_val.out = union(cur_val.out,succ.in);
		}
	}
	gen_kill := getValue(node, init);
	if(def(gen_kill)) {
		remove(cur_val.out, gen_kill.kill);
		cur_val.in = union(gen_kill.gen, cur_val.out);
	}
	return cur_val;
};

# print results
live_result := traversal(node: CFGNode) {
	cur_value := getValue(node, live);
	if(def(cur_value))
		m[node.id] << string(cur_value.in);
};

# user-defined fix point function that is used for analysis termination.
fixp1 := fixp(curr, prev: T_inout) : bool {
	if (len(difference(curr.in, prev.in)) == 0)
		return true;	
	return false;
};

q_all := visitor {
	before node: Method -> {
		cfg = getcfg(node);

		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.DFS, init);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.POSTORDER, init);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.REVERSEPOSTORDER, init);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.WORKLIST_POSTORDER, init);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.WORKLIST_REVERSEPOSTORDER, init);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.ITERATIVE, init);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.RANDOM, init);

		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.DFS, live, fixp1);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.POSTORDER, live, fixp1);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.REVERSEPOSTORDER, live, fixp1);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.WORKLIST_POSTORDER, live, fixp1);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.WORKLIST_REVERSEPOSTORDER, live, fixp1);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.ITERATIVE, live, fixp1);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.RANDOM, live, fixp1);

		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.DFS, live_result);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.POSTORDER, live_result);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.REVERSEPOSTORDER, live_result);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.WORKLIST_POSTORDER, live_result);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.WORKLIST_REVERSEPOSTORDER, live_result);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.ITERATIVE, live_result);
		traverse(cfg, TraversalDirection.BACKWARD, TraversalKind.RANDOM, live_result);
	}
};

visit(p, q_all);
