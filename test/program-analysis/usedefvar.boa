m: output collection[int] of string;
p: Project = input;

# program analysis output
type T_gen_kill= {gen: set of string, kill: string};
# cfg of the current method
cfg: CFG;
cur_cfg_node : CFGNode;

genset : set of string;
killset : string;

# parse node expression to see if a variable is defined or redefined
node_def := visitor {
	before expr:Expression -> {
		switch(expr.kind) {
			case ExpressionKind.VARDECL: 
				var_decls := cur_cfg_node.expr.variable_decls;
				if(len(var_decls)!=0) {
					killset = var_decls[0].name;
				}				
				break;
			case ExpressionKind.ASSIGN: 
				exprs := cur_cfg_node.expr.expressions;
				if(len(exprs)!=0) {				
					killset = exprs[0].variable;
				}
				break;
			default:
				break;
		}
	}
};

# parse node expression to see if a variable is used or not
node_use := visitor {
	before expr:Expression -> {
		if(def(expr.variable)) {
			add(genset, expr.variable);			
		}
	}
};

init := traversal(node: CFGNode): T_gen_kill {
	cur_value : T_gen_kill;
	killset = "";
	init_set1 : set of string;
	genset = init_set1;
	cur_cfg_node = node;
	if(def(node.expr)) {
		visit(node.expr, node_use);
		visit(node.expr, node_def);
	}
	cur_value = {genset, killset};
	return cur_value;
};

result := traversal(node: CFGNode) {
	r:= getvalue(node, init);
	if(def(r)) {
		m[node.id] << string(r.gen);
	}
};

# user-defined fix point function that is used for analysis termination.
fixp1 := fixp(curr, prev: T_gen_kill) : bool {
	return true;
};

q_all := visitor {
	before node: CodeRepository -> {
		snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
		foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
	}
	before node: Method -> {
		clear(init);
		cfg = getcfg(node);
		traverse(cfg, TraversalDirection.FORWARD, TraversalKind.HYBRID, init);
		traverse(cfg, TraversalDirection.FORWARD, TraversalKind.HYBRID, result);
	}
};

visit(p, q_all);
